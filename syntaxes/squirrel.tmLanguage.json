{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "squirrel",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#strings-runscriptcode"
		},
		{
			"include": "#code-blocks"
		}
	],
	"repository": {
		"code-blocks": {
			"patterns": [
				{
					"include": "#control-keywords"
				},
				{
					"include": "#other-keywords"
				},
				{
					"include": "#modifiers"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#class-declarations"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#keyvalues"
				},
				{
					"include": "#braces"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#punctuation"
				},
				{
					"include": "#identifiers"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"match": "(#|//).*",
					"captures": {
						"0": {
							"name": "comment.line.squirrel"
						},
						"1": {
							"name": "punctuation.definition.comment.squirrel"
						}
					}
				},
				{
					"name": "comment.block.squirrel",
					"begin": "/\\*",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.squirrel"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.comment.squirrel"
						}
					}
				},
				{
					"name": "invalid.illegal.comment.squirrel",
					"match": "\\*/"
				}
			]
		},
		"string-escape-sequences": {
			"patterns": [
				{
					"name": "constant.character.escape.squirrel",
					"match": "\\\\x\\h{1,2}"					
				},
				{
					"name": "invalid.illegal.escape.squirrel",
					"match": "\\\\x\\w?"
				},
				{
					"name": "constant.character.escape.squirrel",
					"match": "\\\\u\\h{1,4}"
				},
				{
					"name": "invalid.illegal.escape.squirrel",
					"match": "\\\\u\\w?"
				},
				{
					"name": "constant.character.escape.squirrel",
					"match": "\\\\U\\h{1,8}"
				},
				{
					"name": "invalid.illegal.escape.squirrel",
					"match": "\\\\U\\w?"	
				},
				{
					"name": "constant.character.escape.squirrel",
					"match": "\\\\[0tabnrvf\"\\\\'`]"
				},
				{
					"name": "invalid.illegal.escape.squirrel",
					"match": "\\\\."
				}
			]
		},
		"format-specifiers": {
			"patterns": [
				{
					"name": "constant.other.placeholder",
					"match": "%[-+0# ]?\\d*(\\.\\d+)?[A-Za-z]"
				},
				{
					"name": "constant.other.placeholder",
					"match": "%%"
				}
			]
		},
		"inputs": {
			"patterns": [
				{
					"begin": "(?i)(?<=\\x1brunscriptcode\\x1b)(?!\\x1b)",
					"end": "(?=\"|\n|\\x1b)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings-runscriptcode"
						},
						{
							"include": "#strings-compilestring"
						},
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"begin": "(?i)(?<=,runscriptcode,)(?!,)",
					"end": "(?=\"|\n|,)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings-runscriptcode"
						},
						{
							"include": "#strings-compilestring"
						},
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"begin": "(?i)(?<=:runscriptcode:)(?!:)",
					"end": "(?=\"|\n|:|,|\\x1b)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings-runscriptcode"
						},
						{
							"include": "#strings-compilestring"
						},
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"match": "(?i)(?<=\\x1bcallscriptfunction\\x1b)([_A-Za-z]\\w*)(?=\"|\\x1b)",
					"name": "entity.name.function"
				},
				{
					"match": "(?i)(?<=\\x1bcallscriptfunction\\x1b)([^\\x1b]+)(?=\"|\\x1b)",
					"name": "invalid.illegal.input"
				},
				{
					"match": "(?i)(?<=,callscriptfunction,)([_A-Za-z]\\w*)(?=\"|,)",
					"name": "entity.name.function"
				},
				{
					"match": "(?i)(?<=,callscriptfunction,)([^,]+)(?=\"|,)",
					"name": "invalid.illegal.input"
				},
				{
					"match": "(?i)(?<=:callscriptfunction:)([_A-Za-z]\\w*)(?=[\":,\\x1b])",
					"name": "entity.name.function"
				},
				{
					"match": "(?i)(?<=:callscriptfunction:)([^:]+)(?=[\":,\\x1b])",
					"name": "invalid.illegal.input"
				},
				{
					"match": ".",
					"name": "string.quoted.double"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.regexp.squirrel",
					"begin": "(?<=regexp\\s*\\(\\s*)\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel"
						}
					},
					"end": "\"|\n",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"begin": "(?<=regexp\\s*\\(\\s*)(@\")",
					"name": "string.regexp.squirrel",
					"end": "\"(?!\")",
					"patterns": [
						{
							"include": "#verbatim-regexp"
						}
					]
				},
				{
					"begin": "(?<=compilestring\\s*\\(\\s*(?:format\\s*\\(\\s*)?)(\")",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "\"|\n",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings-compilestring"
						},
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"begin": "(?<=compilestring\\s*\\(\\s*(?:format\\s*\\(\\s*)?)@\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "\"(?!\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"name": "string.quoted.double",
							"begin": "\"\"",
							"end": "\"\"|(?=\"[^\"])"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"match": "(?<=AddThinkToEnt\\s*\\(\\s*\\S.*)(\")(.*?)(\")",
					"captures": {
						"1": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					}
				},
				{
					"match": "(?i)(?<=\"callscriptfunction\"\\s*,?\\s*)(\")(.*?)(\")",
					"captures": {
						"1": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					}
				},
				{
					"begin": "(?i)(?<=\"runscriptcode\"\\s*,?\\s*(?:format\\s*\\(\\s*)?)\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "\"|\n",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings-runscriptcode"
						},
						{
							"include": "#strings-compilestring"
						},
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"begin": "(?i)(?<=\"runscriptcode\"\\s*,?\\s*(?:format\\s*\\(\\s*)?)@\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "\"(?!\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"name": "string.quoted.double",
							"begin": "\"\"",
							"end": "\"\"|(?=\"[^\"])"
						},
						{
							"include": "#strings-runscriptcode"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "\"|\n",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#inputs"
						}
					]
				},
				{
					"begin": "@\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "\"(?!\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"name": "constant.character.escape.squirrel",
							"match": "\"\""
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#inputs"
						}
					]
				}
			]
		},
		"strings-compilestring": {
			"patterns": [
				{
					"begin": "(?<=compilestring\\s*\\(\\s*(?:format\\s*\\(\\s*)?)\\\\\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "\\\\\"|\n|(?=\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings-compilestring"
						},
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"begin": "(?<=compilestring\\s*\\(\\s*(?:format\\s*\\(\\s*)?)@\\\\\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "\\\\\"(?!\\\\\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"name": "string.quoted.double",
							"begin": "\\\\\"{2}",
							"end": "\\\\\"{2}"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"match": "(?<=AddThinkToEnt\\s*\\(\\s*\\S.*)(\\\\\")(.*?)(\\\\\")",
					"captures": {
						"1": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					}
				},
				{
					"match": "(?i)(?<=\\\\\"callscriptfunction\\\\\"\\s*,?\\s*)(\\\\\")(.*+)(\\\\\")",
					"captures": {
						"1": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					}
				},
				{
					"begin": "(?i)(?<=\\\\\"runscriptcode\\\\\"\\s*,?\\s*(?:format\\s*\\(\\s*)?)\\\\\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "\\\\\"|\n",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings-runscriptcode"
						},
						{
							"include": "#strings-compilestring"
						},
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"begin": "(?i)(?<=\\\\\"runscriptcode\\\\\"\\s*,?\\s*(?:format\\s*\\(\\s*)?)@\\\\\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "\\\\\"(?!\\\\\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"name": "string.quoted.double",
							"begin": "\\\\\"\\\\\"",
							"end": "\\\\\"\\\\\"|(?=\\\\\"[^\\\\\"])"
						},
						{
							"include": "#strings-runscriptcode"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"name": "string.quoted.double.squirrel",
					"begin": "\\\\\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel"
						}
					},
					"end": "\\\\\"|\n",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel"
						}
					},
					"patterns": [
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						}
					]
				},
				{
					"name": "string.quoted.double.squirrel",
					"begin": "@\\\\\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel"
						}
					},
					"end": "\\\\\"(?!\\\\\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel"
						}
					},
					"patterns": [
						{
							"name": "constant.character.escape.squirrel",
							"match": "\\\\\"{2}"
						},
						{
							"include": "#format-specifiers"
						}
					]
				}
			]
		},
		"strings-runscriptcode": {
			"patterns": [
				{
					"name": "string.regexp.squirrel",
					"begin": "(?<=regexp\\s*\\(\\s*)`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel"
						}
					},
					"end": "`|\n",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel"
						}
					},
					"patterns": [
						{
							"include": "#regexp-runscriptcode"
						}
					]
				},
				{
					"begin": "(?<=regexp\\s*\\(\\s*)(@`)",
					"name": "string.regexp.squirrel",
					"end": "`(?!`)",
					"patterns": [
						{
							"include": "#verbatim-regexp-runscriptcode"
						}
					]
				},
				{
					"begin": "(?<=compilestring\\s*\\(\\s*(?:format\\s*\\(\\s*)?)`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "`|\n|(?=\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings-compilestring"
						},
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"begin": "(?<=compilestring\\s*\\(\\s*(?:format\\s*\\(\\s*)?)@`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "`(?!`)|(?=\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"name": "string.quoted.double",
							"begin": "``",
							"end": "``|(?=`[^`])"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"match": "(?<=AddThinkToEnt\\s*\\(\\s*\\S.*)(`)(.*?)(`)",
					"captures": {
						"1": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					}
				},
				{
					"match": "(?i)(?<=`callscriptfunction`\\s*,?\\s*)(`)(.*?)(`)",
					"captures": {
						"1": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					}
				},
				{
					"begin": "(?i)(?<=`runscriptcode`\\s*,?\\s*(?:format\\s*\\(\\s*)?)`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "`|\n|(?=\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings-runscriptcode"
						},
						{
							"include": "#strings-compilestring"
						},
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"begin": "(?i)(?<=`runscriptcode`\\s*,?\\s*(?:format\\s*\\(\\s*)?)@`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel string.quoted.double"
						}
					},
					"end": "`(?!`)|(?=\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel string.quoted.double"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"name": "string.quoted.double",
							"begin": "``",
							"end": "``|(?=`[^`])"
						},
						{
							"include": "#strings-runscriptcode"
						},
						{
							"include": "#format-specifiers"
						},
						{
							"include": "#code-blocks"
						}
					]
				},
				{
					"name": "string.quoted.double.squirrel",
					"begin": "`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel"
						}
					},
					"end": "`|\n|(?=\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel"
						}
					},
					"patterns": [
						{
							"include": "#string-escape-sequences"
						},
						{
							"include": "#format-specifiers"
						}
					]
				},
				{
					"name": "string.quoted.double.squirrel",
					"begin": "@`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.squirrel"
						}
					},
					"end": "`(?!`)|(?=\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.squirrel"
						}
					},
					"patterns": [
						{
							"name": "constant.character.escape.squirrel",
							"match": "``"
						},
						{
							"include": "#format-specifiers"
						}
					]
				}
			]
		},
		"regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\\\\\[bB]|\\^|\\$"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|\\d+)\\}"
				},
				{
					"name": "invalid.illegal.group.regexp",
					"match": "\\[\\]|\\(\\)"
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((\\?:)?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp"
						}
					},
					"end": "\\)|(?=\"|\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "\\]|(?=\"|\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp-characters"
						},
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "-"
						}
					]
				},
				{
					"name": "invalid.illegal.character.regexp",
					"match": "\\[|\\]|\\(|\\)|\\{|\\}"
				},
				{
					"include": "#regexp-characters"
				}
			]
		},
		"regexp-characters": {
			"patterns": [
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\\\\\[luaAwWsSdDxXcCpP]|\\."
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\\\\\(?:\\\\[0tabnrvf\"\\\\'`]|[^\"\\\\])"
				},
				{
					"include": "#string-escape-sequences"
				}
			]
		},
		"verbatim-regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\[bB]|\\^|\\$"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|\\d+)\\}"
				},
				{
					"name": "invalid.illegal.group.regexp",
					"match": "\\[\\]|\\(\\)"
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((\\?:)?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp"
						}
					},
					"end": "\\)|(?=\"[^\"])",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "\\]|(?=\"[^\"])",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"include": "#verbatim-regexp-characters"
						},
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "-"
						}
					]
				},
				{
					"name": "invalid.illegal.character.regexp",
					"match": "\\[|\\]|\\(|\\)|\\{|\\}"
				},
				{
					"include": "#verbatim-regexp-characters"
				}
			]
		},
		"verbatim-regexp-characters": {
			"patterns": [
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\[luaAwWsSdDxXcCpP]|\\."
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\[^\"]"
				},
				{
					"name": "constant.character.escape.regexp",
					"match": "\"\""
				}
			]
		},
		"regexp-runscriptcode": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\\\\\[bB]|\\^|\\$"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|\\d+)\\}"
				},
				{
					"name": "invalid.illegal.group.regexp",
					"match": "\\[\\]|\\(\\)"
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((\\?:)?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp"
						}
					},
					"end": "\\)|(?=`|\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "\\]|(?=`|\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp-characters-runscriptcode"
						},
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "-"
						}
					]
				},
				{
					"name": "invalid.illegal.character.regexp",
					"match": "\\[|\\]|\\(|\\)|\\{|\\}"
				},
				{
					"include": "#regexp-characters-runscriptcode"
				}
			]
		},
		"regexp-characters-runscriptcode": {
			"patterns": [
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\\\\\[luaAwWsSdDxXcCpP]|\\."
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\\\\\(?:\\\\[0tabnrvf`\\\\'`]|[^`\\\\])"
				},
				{
					"include": "#string-escape-sequences"
				}
			]
		},
		"verbatim-regexp-runscriptcode": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\[bB]|\\^|\\$"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|\\d+)\\}"
				},
				{
					"name": "invalid.illegal.group.regexp",
					"match": "\\[\\]|\\(\\)"
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((\\?:)?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp"
						}
					},
					"end": "\\)|(?=`[^`])",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "\\]|(?=`[^`])",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"include": "#verbatim-regexp-characters-runscriptcode"
						},
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "-"
						}
					]
				},
				{
					"name": "invalid.illegal.character.regexp",
					"match": "\\[|\\]|\\(|\\)|\\{|\\}"
				},
				{
					"include": "#verbatim-regexp-characters-runscriptcode"
				}
			]
		},
		"verbatim-regexp-characters-runscriptcode": {
			"patterns": [
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\[luaAwWsSdDxXcCpP]|\\."
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\[^`]"
				},
				{
					"name": "constant.character.escape.regexp",
					"match": "``"
				}
			]
		},
		"control-keywords": {
			"patterns": [
				{
					"name": "keyword.control.loop.squirrel",
					"match": "(?<![_A-Za-z])(for|foreach|while|break|continue|do)\\b"
				},
				{
					"name": "keyword.control.conditional.squirrel",
					"match": "(?<![_A-Za-z])(else if|else|if)\\b"
				},
				{
					"name": "keyword.control.switch.squirrel",
					"match": "(?<![_A-Za-z])(case|default|switch)\\b"
				},
				{
					"name": "keyword.control.trycatch.squirrel",
					"match": "(?<![_A-Za-z])(try|catch)\\b"
				},
				{
					"name": "keyword.control.flow.squirrel",
					"match": "(?<![_A-Za-z])(return|throw|yield|resume)\\b"
				}
			]
		},
		"other-keywords": {
			"patterns": [
				{
					"name": "keyword.other.in.squirrel",
					"match": "(?<![_A-Za-z])in\\b"
				},
				{
					"match": "(?<![_A-Za-z])(instanceof)(?:\\s+|\\s*(::)\\s*)([_A-Za-z]\\w*)\\b",
					"captures": {
						"1": {
							"name": "keyword.operator.expression.instanceof.squirrel"
						},
						"2": {
							"name": "storage.modifier.global.squirrel"
						},
						"3": {
							"name": "entity.name.type.class.squirrel"
						}
					}
				},
				{
					"name": "keyword.operator.expression.typeof.squirrel",
					"match": "(?<![_A-Za-z])typeof\\b"
				},
				{
					"name": "keyword.operator.expression.delete.squirrel",
					"match": "(?<![_A-Za-z])delete\\b"
				},
				{
					"name": "keyword.operator.expression.clone.squirrel",
					"match": "(?<![_A-Za-z])clone\\b"
				},
				{
					"name": "variable.language.this.squirrel",
					"match": "(?<![_A-Za-z])this\\b"
				},
				{
					"name": "variable.language.base.squirrel",
					"match": "(?<![_A-Za-z])base\\b"
				},
				{
					"name": "keyword.operator.expression.rawcall.squirrel",
					"match": "(?<![_A-Za-z])rawcall\\b"
				}
			]
		},
		"modifiers": {
			"patterns": [
				{
					"match": "(?<![_A-Za-z])(const)(?:\\s+([_A-Za-z]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.modifier.squirrel"
						},
						"2": {
							"name": "variable.other.constant.squirrel"
						}
					}
				},
				{
					"name": "storage.modifier.squirrel",
					"match": "(?<![_A-Za-z])(local|static)\\b"
				},
				{
					"name": "storage.modifier.global.squirrel",
					"match": "::(?=\\s*\\w)"
				},
				{
					"match": "(?<![_A-Za-z])(local)\\s+([_A-Za-z]\\w*)\\s*(:)\\s*([_A-Za-z]\\w*)\\b",
					"captures": {
						"1": {
							"name": "storage.modifier.squirrel"
						},
						"2": {
							"name": "variable.other.declaration.squirrel"
						},
						"3": {
							"name": "punctuation.separator.type.squirrel"
						},
						"4": {
							"name": "entity.name.type.squirrel"
						}
					}
				},
				{
					"match": "(?<![_A-Za-z])(const)\\s+([_A-Za-z]\\w*)\\s*(:)\\s*([_A-Za-z]\\w*)\\b",
					"captures": {
						"1": {
							"name": "storage.modifier.squirrel"
						},
						"2": {
							"name": "variable.other.constant.declaration.squirrel"
						},
						"3": {
							"name": "punctuation.separator.type.squirrel"
						},
						"4": {
							"name": "entity.name.type.squirrel"
						}
					}
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.squirrel",
					"match": "(?<![_A-Za-z])true\\b"
				},
				{
					"name": "constant.language.boolean.false.squirrel",
					"match": "(?<![_A-Za-z])false\\b"
				},
				{
					"name": "constant.language.null.squirrel",
					"match": "(?<![_A-Za-z])null\\b"
				},
				{
					"name": "constant.numeric.integer.octal.squirrel",
					"match": "0[0-7]+[0-9]+",
					"captures": {
						"0": {
							"patterns": [
								{
									"name": "invalid.illegal.integer.octal.squirrel",
									"match": "8|9"
								}
							]
						}
					}
				},
				{
					"name": "constant.numeric.float.squirrel",
					"match": "\\d+([eE][+-]?|\\.)(\\d|[eE][+-]?|\\.)*(?![\\deE\\.])",
					"captures": {
						"0": {
							"patterns": [
								{
									"match": "[eE][+-](?!\\d)",
									"name": "invalid.illegal.float.squirrel"
								},
								{
									"match": "[eE](?![+-]?\\d)",
									"name": "invalid.illegal.float.squirrel"
								}
							]
						}
					}
				},
				{
					"name": "constant.numeric.integer.decimal.squirrel",
					"match": "0[89][0-9]*\\b"
				},
				{
					"name": "constant.numeric.integer.hexadecimal.squirrel",
					"match": "0[xX](\\w*)\\b",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "[_G-Zg-z]",
									"name": "invalid.illegal.integer.hexadecimal.squirrel"
								}
							]
						}
					}
				},
				{
					"name": "constant.numeric.integer.decimal.squirrel",
					"match": "(0|[1-9][0-9]*)"
				},
				{
					"name": "string.quoted.single.squirrel",
					"match": "(\\')(\\\\x\\h{1,2}|\\\\x\\w?|\\\\u\\h{1,4}|\\\\u\\w?|\\\\U\\h{1,8}|\\\\U\\w?|\\\\.|.)?([^']*)(\\'|\n)",
					"captures": {
						"1": {
							"name": "punctuation.definition.string.begin.squirrel"
						},
						"2": {
							"patterns": [
								{
									"include": "#string-escape-sequences"
								}
							]
						},
						"3": {
							"name": "invalid.illegal.char"
						},
						"4": {
							"name": "punctuation.definition.string.end.squirrel"
						}
					}
				}
			]
		},
		
		"class-declarations": {
			"patterns": [
				{
					"match": "(?<![_A-Za-z])(class)\\s+([_A-Za-z]\\w*)\\s*(?:(extends)\\s+([_A-Za-z]\\w*))?\\s*(?=\\{)",
					"captures": {
						"1": {
							"name": "storage.type.class.squirrel"
						},
						"2": {
							"name": "entity.name.type.class.squirrel"
						},
						"3": {
							"name": "storage.modifier.extends.squirrel"
						},
						"4": {
							"name": "entity.name.type.class.squirrel"
						}
					}
				},
				{
					"match": "(?<![_A-Za-z])(?:([_A-Za-z]\\w*)\\s*(=|<-)\\s*)?(class)\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.class.squirrel"
						},
						"2": {
							"name": "keyword.operator.assignment.squirrel"
						},
						"3": {
							"name": "storage.type.class.squirrel"
						}
					}
				},
				{
					"match": "(?<![_A-Za-z])extends\\b",
					"name": "storage.modifier.extends.squirrel"
				},
				{
					"match": "(?<![_A-Za-z])class\\b",
					"name": "storage.type.class.squirrel"
				},
				{
					"match": "(?<![_A-Za-z])(Vector|QAngle|Vector2D|Vector4D|Quaternion|Convars|Entities|EntityOutputs|NavMesh|NetProps|PlayerVoiceListener|CBaseEntity|CBaseAnimating|CBaseCombatWeapon|CBaseFlex|CBaseCombatCharacter|CBasePlayer|CBaseMultiplayerPlayer|CEconEntity|CTFPlayer|CTFBot|CTFBaseBoss|CEntities|CTFNavArea|CNavMesh|CNetPropManager|CScriptEntityOutputs|CScriptKeyValues|CPlayerVoiceListener|CEnvEntityMaker|CPointTemplate|CFuncTrackTrain|CPointScriptTemplate|CSceneEntity|CCallChainer|CSimpleCallChainer|NextBotCombatCharacter|INextBotComponent|ILocomotion|LateBinder|regexp)\\b(?!\\s*(?:=|<-))",
					"name": "entity.name.type.class.squirrel"
				},
				{
					"match": "(?<![_A-Za-z])(enum)\\s+([_A-Za-z]\\w*)\\b",
					"captures": {
						"0": {
							"name": "meta.enum.squirrel"
						},
						"1": {
							"name": "storage.type.enum.squirrel"
						},
						"2": {
							"name": "entity.name.type.enum.squirrel"
						}
					}
				},
				{
					"match": "(?<![_A-Za-z])enum\\b",
					"name": "storage.type.enum.squirrel"
				},
				{
					"match": "(?<![_A-Za-z])(Constants|EBotType|ECollisionGroup|ECritType|EHitGroup|EHoliday|EHudNotify|EMoveCollide|EMoveType|ENavCornerType|ENavDirType|ENavRelativeDirType|ENavTraverseType|ERenderFx|ERenderMode|ERoundState|EScriptRecipientFilter|ESolidType|ESpectatorMode|EStopwatchState|ETFBotDifficultyType|ETFClass|ETFCond|ETFDmgCustom|ETFTeam|Math|Server|FButtons|FContents|FDmgType|FEntityEffects|FEntityEFlags|FHideHUD|FNavAttributeType|FPlayer|FSolid|FSurf|FTaunts|FTFBotAttributeType|FTFNavAttributeType)",
					"name": "entity.name.type.enum.squirrel"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"match": "(?<![_A-Za-z])(function)\\s+((?:[_A-Za-z]\\w*::)*)([_A-Za-z]\\w*)\\b",
					"captures": {
						"1": {
							"name": "storage.type.function.squirrel"
						},
						"2": {
							"patterns": [
								{
									"name": "punctuation.separator.namespace.access.squirrel",
									"match": "::"
								},
								{
									"include": "#identifiers"
								}
							]
						},
						"3": {
							"name": "entity.name.function.squirrel"
						}
					}
				},
				{
					"name": "storage.type.function.squirrel",
					"match": "(?<![_A-Za-z])function\\b|@"
				},
				{
					"name": "entity.name.function.squirrel",
					"match": "(?<![_A-Za-z])[_A-Za-z]\\w*\\b(?=\\s*(=|<-)\\s*(function\\b|@\\s*\\())"
				},
				{
					"name": "entity.name.function.squirrel",
					"match": "(?<![_A-Za-z])[_A-Za-z]\\w*\\b(?=\\s*\\()"
				},
				{
					"name": "entity.name.function.squirrel",
					"match": "(?<![_A-Za-z])[_A-Za-z][\\w]*(?=\\s*\\.\\s*(bindenv|call|pcall|acall|pacall))"
				}
			]
		},
		"braces": {
			"patterns": [
				{
					"match": "\\{|\\}",
					"name": "meta.brace.curly.squirrel"
				},
				{
					"match": "\\(|\\)",
					"name": "meta.brace.round.squirrel"
				},
				{
					"match": "\\[|\\]",
					"name": "meta.brace.square.squirrel"
				},
				{
					"match": "</|/>",
					"name": "entity.name.type.squirrel"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.logical.squirrel",
					"match": "!|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.bitwise.squirrel",
					"match": "~|&|\\||\\^|>>>|<<|>>"
				},
				{
					"name": "keyword.operator.assignment.squirrel",
					"match": "<-"
				},
				{
					"name": "keyword.operator.comparison.squirrel",
					"match": "<=>|==|!=|<=|>=|<|>"
				},
				{
					"name": "keyword.operator.assignment.squirrel",
					"match": "\\+=|-=|\\*=|/=|%=|="
				},
				{
					"name": "keyword.operator.increment.squirrel",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.decrement.squirrel",
					"match": "\\-\\-"
				},
				{
					"name": "keyword.operator.arithmetic.squirrel",
					"match": "\\-|\\+|\\*|\\/|%"
				},
				{
					"name": "keyword.operator.ternary.squirrel",
					"match": "\\?"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.ellipsis.squirrel",
					"match": "\\.\\.\\."
				},
				{
					"name": "invalid.illegal.operator.squirrel",
					"match": "\\.\\."
				},
				{
					"name": "punctuation.separator.comma.squirrel",
					"match": ","
				},
				{
					"name": "punctuation.accessor.squirrel",
					"match": "\\."
				},
				{
					"name": "punctuation.terminator.squirrel",
					"match": ";"
				},
				{
					"match": "::"
				},
				{
					"name": "punctuation.colon.squirrel",
					"match": ":"
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "entity.name.keyvalue.type.squirrel",
					"match": "\\b(null|table|array|func|string|blob|integer|float|entity|class|instance|bool)\\b"
				},
				{
					"name": "variable.other.constant.squirrel",
					"match": "(?<![_A-Za-z])[_A-Z][_A-Z0-9]*\\b"
				},
				{
					"name": "variable.other.constant.squirrel",
					"match": "(?<![_A-Za-z])(_charsize_|_floatsize_|_intsize_|_version_|_versionnumber_|self|__vrefs|__vname|activator|caller|kHoliday_None|kHoliday_TFBirthday|kHoliday_Halloween|kHoliday_Christmas|kHoliday_CommunityUpdate|kHoliday_EOTL|kHoliday_Valentines|kHoliday_MeetThePyro|kHoliday_FullMoon|kHoliday_HalloweenOrFullMoon|kHoliday_HalloweenOrFullMoonOrValentines|kHoliday_AprilFools|kHoliday_Soldier|kHoliday_Summer|kHolidayCount|kRenderFxNone|kRenderFxPulseSlow|kRenderFxPulseFast|kRenderFxPulseSlowWide|kRenderFxPulseFastWide|kRenderFxFadeSlow|kRenderFxFadeFast|kRenderFxSolidSlow|kRenderFxSolidFast|kRenderFxStrobeSlow|kRenderFxStrobeFast|kRenderFxStrobeFaster|kRenderFxFlickerSlow|kRenderFxFlickerFast|kRenderFxNoDissipation|kRenderFxDistort|kRenderFxHologram|kRenderFxExplode|kRenderFxGlowShell|kRenderFxClampMinScale|kRenderFxEnvRain|kRenderFxEnvSnow|kRenderFxSpotlight|kRenderFxRagdoll|kRenderFxPulseFastWider|kRenderFxMax|kRenderNormal|kRenderTransColor|kRenderTransTexture|kRenderGlow|kRenderTransAlpha|kRenderTransAdd|kRenderEnvironmental|kRenderTransAddFrameBlend|kRenderTransAlphaAdd|kRenderWorldGlow|kRenderNone|kRenderModeCount|Zero|Epsilon|GoldenRatio|One|Sqrt2|Sqrt3|E|Pi|Tau|ConstantNamingConvention)\\b"
				},
				{
					"match": "(?<=:)\\s*([_A-Za-z]\\w*)\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.squirrel"
						}
					}
				},
				{
					"name": "variable.other.squirrel",
					"match": "(?<![_A-Za-z])[_A-Za-z]\\w*\\b"
				}
			]
		},
		"keyvalues": {
			"patterns": [
				{
					"name": "entity.name.keyvalue.string.squirrel",
					"match": "\\b(Actor|AllowUse|ArrivalConceptModifier|AttractPlayerConceptModifier|BackgroundBModel|BaseConceptModifiers|Branch01|Branch02|Branch03|Branch04|Branch05|Branch06|Branch07|Branch08|Branch09|Branch10|Branch11|Branch12|Branch13|Branch14|Branch15|Branch16|BreakModelMessage|Case01|Case02|Case03|Case04|Case05|Case06|Case07|Case08|Case09|Case10|Case11|Case12|Case13|Case14|Case15|Case16|ComingBackConceptModifier|DamageTarget|DefaultAnim|DestinationGroup|EndSprite|Entity|EntityTemplate|EventName|ExpressionOverride|FailureConceptModifier|Filter01|Filter02|Filter03|Filter04|Filter05|FireSound|Goal|Group|Group00|Group01|Group02|Group03|Group04|Group05|Group06|Group07|Group08|Group09|Group10|Group11|Group12|Group13|Group14|Group16|IgnoreEntity|IgnoredName01|IgnoredName02|IgnoredName03|IgnoredName04|IgnoredName05|IgnoredName06|IgnoredName07|IgnoredName08|IgnoredName09|IgnoredName10|IgnoredName11|IgnoredName12|IgnoredName13|IgnoredName14|IgnoredName15|IgnoredName16|InitialOwner|LaserTarget|LightingLandmark|LightingOrigin|LightingOriginHack|LightningEnd|LightningStart|ListenFilter|MainSoundscapeName|Material|MeasureReference|MeasureTarget|MissingWeaponConceptModifier|ModelOverride|MovePingSound|MoveSound|NPCHintGroup|NPCSquadName|NPCTargetname|NPCType|Name|NewHintGroup|NextKey|OverlayName1|OverlayName10|OverlayName2|OverlayName3|OverlayName4|OverlayName5|OverlayName6|OverlayName7|OverlayName8|OverlayName9|PSName|ParticleEffect|ParticleTrailMaterial|PointCamera|PoseParameterName|PostArrivalConceptModifier|PropName|Relationship|RenameNPC|RespawnName|ResponseContext|ResumeSceneFile|RetrieveConceptModifier|SceneFile|SearchName|Sentence|SkyboxName|SourceEntityName|SpeakerName|StartConceptModifier|StartSound|StopSound|SuccessConceptModifier|TargetReference|Template01|Template02|Template03|Template04|Template05|Template06|Template07|Template08|Template09|Template10|Template11|Template12|Template13|Template14|Template15|Template16|TemplateName|VehicleScript|WaitOverConceptModifier|WaitPointName|WeaponClassname|WeaponName|action_point|additionalequipment|altpath|angleOverride|area_cap_point|assaultgroup|assaultpoint|associated_team_entity|associatedmodel|attach1|attach2|attachment_name|attribute_name|blue_teleport|bot_name|bottomtrack|breaksound|cameraname|caplayout|chainstodoor|chaptertitle|class|classname|closesound|command|commentaryfile|commentaryfile_nohdr|constraintsystem|controlpoint|cpoint1|cpoint10|cpoint11|cpoint12|cpoint13|cpoint14|cpoint15|cpoint16|cpoint17|cpoint18|cpoint19|cpoint2|cpoint20|cpoint21|cpoint22|cpoint23|cpoint24|cpoint25|cpoint26|cpoint27|cpoint28|cpoint29|cpoint3|cpoint30|cpoint31|cpoint32|cpoint33|cpoint34|cpoint35|cpoint36|cpoint37|cpoint38|cpoint39|cpoint4|cpoint40|cpoint41|cpoint42|cpoint43|cpoint44|cpoint45|cpoint46|cpoint47|cpoint48|cpoint49|cpoint5|cpoint50|cpoint51|cpoint52|cpoint53|cpoint54|cpoint55|cpoint56|cpoint57|cpoint58|cpoint59|cpoint6|cpoint60|cpoint61|cpoint62|cpoint63|cpoint7|cpoint8|cpoint9|cpr_cp_names|cpr_printname|croc_model|damagefilter|decalname|detailmaterial|directionentityname|directory|display_text|displaytext|door_name|effect_name|enemy_team_score_sound|enemyfilter|enginesound|entity|entity_name|env_spark_name|event_to_fire|excludednpc|explode_particle|face_entity|filename|filterclass|filtername|flag_icon|flag_model|flag_paper|flag_trail|gassound|globalname|globalstate|goal_node|goalent|hint_message|hintactivity|hintgroup|hud_icon|hud_res_file|hull_name|icon|ignite_particle_name|ignite_sound_name|ignoredEntity|initial_command|ladderSurfaceProperties|landmark|launchTarget|linked_cp_1|linked_cp_2|linked_cp_3|linked_cp_4|linked_cp_5|linked_cp_6|linked_cp_7|linked_cp_8|linked_pathtrack_1|linked_pathtrack_2|linked_pathtrack_3|linked_pathtrack_4|linked_pathtrack_5|linked_pathtrack_6|linked_pathtrack_7|linked_pathtrack_8|listener|locationproxy|locked_sound|lookatname|m_SoundName|m_SourceEntityName|m_iszCustomMove|m_iszEntity|m_iszEntry|m_iszIdle|m_iszNewTarget|m_iszNextScript|m_iszPlay|m_iszPostIdle|mapname|master|matchingTeleporter|material|measuretarget|message|messagesound|model|movementsound|newtarget|nextMap|next_action_point|nextassaultpoint|noise1|noise2|overlaymaterial|overridescript|parentattachment|parentname|particle_name|pattern|pickup_particle|pickup_sound|point_capture_end_sound|point_capture_interrupted_sound|point_capture_progress_sound|point_capture_start_sound|point_printname|point_warn_sound|position0|position1|position2|position3|position4|position5|position6|position7|postcommands|powerup_model|precommands|prop_drop_sound|prop_model_name|prop_pickup_sound|puntsound|rallypoint|rallysequence|red_teleport|res_file|respawn_interval|respawnroomname|round_bluespawn|round_redspawn|scene0|scene1|scene10|scene11|scene12|scene13|scene14|scene15|scene2|scene3|scene4|scene5|scene6|scene7|scene8|scene9|scriptfile|sentence|shootsound|slavename|sound|soundcloseoverride|soundlockedoverride|soundmoveoverride|soundopenoverride|soundscape|soundunlockedoverride|source|spawn_manager_name|spawn_on_start|spawngroup|speakers|spritename|squadname|start_node|startclosesound|startpath|startsound|subject|swapmodel|tags|target|target1|target2|target3|target4|target5|target6|target7|target8|target_base_name|targetattachment|targetentityname|targetname|team|template|texture|texturename|thinkfunction|toptrack|touch_trigger|tracertype|train|trigger_name|unlocked_sound|vehicle|viewposition|viewtarget|vscripts|weaponname|your_team_score_sound)\\b"
				},
				{
					"name": "entity.name.keyvalue.number.squirrel",
					"match": "\\b(AbandonIfEnemyHides|Active|ActorInPVS|ActorInVehicle|ActorSeePlayer|ActorSeeTarget|ActorTargetProximity|Aggressiveness|AirCtrlSupressionTime|AllowDispenser|AllowSentry|AllowTeleporters|AssaultCue|AutoMaterialize|BaseSpread|BlockDamage|BoltWidth|CapEnableDelay|CapturePoint|CollisionGroup|Color1|Color2|ComingBackWaitForSpeak|CompareValue|CriterionDistance|CriterionVisibility|Crits|CustomCoverOnReload|CustomMaxShots|CustomMaxTimeShots|CustomMinShots|CustomMinTimeShots|CustomOddsCover|CycleFrequency|Damage|DamageDelay|DamageForce|DamageRadius|DamageType|Damagetype|DangerousTime|DangerousTimer|Density|DensityRampSpeed|DestroyBuildings|DirectionNoise|DirectionSuppressAirControl|Directional|DisableBoneFollowers|DistMax|Distance|DontMessageParent|DontSpeakStart|DontUseSpeechSemaphore|EffectDuration|EndSize|EntryAngleTolerance|ExplodeDamage|ExplodeRadius|FModAmplitude|FModRate|FModTimeOffset|FModType|FOV|FadeDist|FadeStartDist|FallSpeed|FetchEventData|FieldOfView|FilterType|Formation|GagLeader|GameType|GlowColor|GlowProxySize|HDRColorScale|HintGroupChangeReaction|HoldNoise|HoldTime|HorizontalGlowSize|IdleModifier|IgnoreFacing|IgnoreSolid|InRandomPool|InitialState|InitialValue|InputFilter|IntegerValue|Intensity|InterpolationTime|InterpolationWrap|InvertAllow|IsEnabled|LeadDistance|LeadDuringCombat|LifetimeMax|LifetimeMin|LowPriority|Magnitude|ManualAccelSpeed|ManualDecelSpeed|ManualSpeedChanges|MatchSummary|MaxAnimTime|MaxDelay|MaxDist|MaxLiveChildren|MaxNPCCount|MaxRagdollCount|MaxRagdollCountDX8|MaxRange|MaxScore|MaxTimeout|MaximumState|MeasureType|MinAnimTime|MinDist|MinHitPointsToCommit|MinSpawnDistance|MinTimeout|MinigameType|MinimumHitPoints|MinimumState|Mode|ModelScale|MoveDistance|MoveSoundMaxPitch|MoveSoundMaxTime|MoveSoundMinPitch|MoveSoundMinTime|MoveSpeed|MoveType|MovementSpeed|Negated|NeutralType|NeverSayHello|NewLevelUnit|Noise|NoiseAmplitude|OuterMaxDist|OverlayID|OverlayTime1|OverlayTime10|OverlayTime2|OverlayTime3|OverlayTime4|OverlayTime5|OverlayTime6|OverlayTime7|OverlayTime8|OverlayTime9|ParticleDrawWidth|ParticleSpacingDistance|ParticleTrailEndSize|ParticleTrailLifetime|ParticleTrailStartSize|PauseDuration|PerformanceMode|PlayerActorFOV|PlayerActorFOVTrueCone|PlayerActorLOS|PlayerActorProximity|PlayerBattleline|PlayerBlockingActor|PlayerInVehicle|PlayerTargetFOV|PlayerTargetFOVTrueCone|PlayerTargetLOS|PlayerTargetProximity|PointValue|PortalVersion|PoseValue|PositionInterpolator|PostSpawnDirectionVariance|PostSpawnInheritAngles|PostSpawnSpeed|PressureDelay|Radius|RallySelectMethod|RandomAnimation|Rate|RefireTime|RequiredTime|RespawnTime|Retrieve|RetrieveDistance|RetrieveWaitForSpeak|ReturnBetweenWaves|ReturnTime|ReuseDelay|Roll|RollSpeed|RotationInterpolator|RotationSpeed|Run|SaveImportant|ScoreType|ScoringType|ScriptStatus|ScrollSpeed|SearchType|Sensitivity|ShotClockMode|ShouldComparetoValue|Simulation|SizeMax|SizeMin|Slack|SmoothFactor|SolidToPlayer|Solidity|SoundMask|SpawnFrequency|SpawnMode|SpawnRate|SpeedMax|SpeedMin|SpeedNoise|SplashRadius|SpotlightLength|SpotlightWidth|SpreadAngle|StartActive|StartDirection|StartDisabled|StartHintDisabled|StartPosition|StartSize|StayAtCover|StopScenes|Strict|StrikeTime|Subdiv|SuccessDistance|SuddenDeathTime|TargetNode|TargetScale|Task|TeamNum|TextureScale|TextureScroll|TimeToTrigger|TouchType|TrailLength|TranslucencyLimit|TriggerHitPoints|Twist|Type|UseScreenAspectRatio|Value|VehicleLocked|VerticalGlowSize|Viewkick|VisibleWhenDisabled|WaitDistance|WaveHeight|WeaponType|WeightToActivate|Width|WindAngle|WindSpeed|ZapperType|actionOnDeath|actionScale|add|add_or_remove|addangaccel|additionaliterations|addlength|alarm|alert_delay|allowClassChanges|allowDemoman|allowEngineer|allowHaunting|allowHeavy|allowMedic|allowPyro|allowScout|allowSniper|allowSoldier|allowSpy|allowdiversion|allowdiversionradius|allownewgibs|alternateticksfix|ambient|ammomod|amount|amplitude|angle|angularlimit|animate|applyAngularImpulse|area_time_to_cap|assaultdelay|assaulttimeout|assaulttolerance|attachment_type|attenuation|auto_countdown|background|ball_spawn_countdown|bank|beamcount_max|beamcount_min|bias|body|bot_class|burn_duration|busyactor|cameraspace|capture_delay|capture_delay_offset|channel|cheapwaterenddistance|cheapwaterstartdistance|clearoncontact|coldworld|collisions|color|colormax|colormin|condition|constant|count|counter|cpm_restrict_team_cap_win|cpoint1_parent|cpoint2_parent|cpoint3_parent|cpoint4_parent|cpoint5_parent|cpoint6_parent|cpoint7_parent|cpr_priority|cpr_restrict_team_cap_win|ctf_overtime|current|custom_position_x|custom_position_y|cycle|cycletype|damage|damage_percent_per_second|damagecap|damagemodel|damagescale|damagetoenablemotion|damagetype|damping|defaultstyle|defaultupgrade|defaultwelcome|delay|density|desired_distance|developeronly|difficulty|disableDodge|disableallshadows|disabled|disablereceiveshadows|disableshadows|display_to_team|disposition|dissolvetype|distance|dmg|drivermaxspeed|driverminspeed|drop_to_ground|duration|effect|effect_duration|effects|enabled|enableshadows|endnode|endsize|endwidth|entity_count|error|event_data_int|event_delay|exactVelocityChoiceType|expdamage|explodemagnitude|explosion|expradius|face_entity_fov|fadeDuration|fadeInDuration|fadeOutDuration|fadein|fadeout|fadescale|farz|filter_max_per_enemy|filter_outer_radius|filter_radius|filtermass|filterteam|finale_length|fireattack|firedamage|fireinterval|fireradius|firesize|firetype|flag_as_weather|flag_reset_delay|fogColor|fogEnable|fogEnd|fogMaxDensity|fogRadial|fogStart|fogblend|fogcolor|fogcolor2|fogenable|fogend|foglerptime|fogmaxdensity|fogradial|fogstart|font|force|force_map_reset|forceclosed|forcecrouch|forcelimit|forcestate|forcetime|forcetoenablemotion|fov|fragility|frame|framerate|framestart|frequency|friction|friendlyfire|fuel|fxtime|gamematerial|gametitle|gearratio|gibanglevelocity|gibgravityscale|gibs|graball|gravity|group_number|gustdirchange|gustduration|hammerid|handle_train_movement|hardware|has_spiral|heal_distance|health|heatlevel|heattime|height|hingefriction|hint|hintlimiting|hinttype|hitboxset|holdtime|holiday_type|hud_min_speed_level_1|hud_min_speed_level_2|hud_min_speed_level_3|hud_type|iMagnitude|iRadiusOverride|ignitionpoint|ignoredebris|ignoreunseenenemies|in1|in2|inertiafactor|inertiascale|infinite_zombies|initialstate|inmax|inmin|inner_radius|interruptability|interval|interval_max|interval_min|invert_exclusion|length|life|lifetime|lifetime_max|lifetime_min|lightfov|lightonlytarget|lightworld|linktype|lip|loadtime|loopmovesound|loser_respawn_bonus_per_bot|lowerThreshold|ltime|m_Color|m_bDisableNPCCollisions|m_bIgnoreGravity|m_bLoopActionSequence|m_bOn|m_bSynchPostIdles|m_fMoveTo|m_flGibLife|m_flRadius|m_flRepeat|m_flVariance|m_flVelocity|m_iGibs|magnitude|massScale|massoverride|massscale|match_summary|max|maxActive|max_health|max_length|max_pass_range|max_points|max_zombies|maxburstdelay|maxburstsize|maxdirectedspeed|maxfalloff|maxgust|maxgustdelay|maxobjects|maxoccludeearea|maxpieces|maxpiecesdx8|maxpropscreenwidth|maxslidetime|maxspeed|maxweight|maxwind|messageattenuation|messagevolume|min|min_points|minburstdelay|minburstsize|mindirectedspeed|mindxlevel|minfalloff|mingust|mingustdelay|minhealthdmg|minlength|minoccluderarea|minpropscreenwidth|minslidetime|minspeed|minwind|modelindex|modelscale|move_speed_reduction|nearz|nevertimeout|nextthink|nodamageforces|nodeFOV|nodeid|nodmgforce|nogibshadows|nolistrepeats|notsolid|num_sections|object_type|occludernumber|offset|onlyVelocityCheck|onplayerdeath|opacity|opendir|orientation|orientationtype|out1|out2|overlaycolor|overlaysize|partial_cap_points_rate|passActivator|physicsSpeed|physicsmode|pitch|play_all_rounds|playbackrate|playerSpeed|playsound|point_default_owner|point_group|point_index|point_start_locked|point_warn_on_cap|points|points_per_player|portalnumber|preciptype|prevent_movement|priority|radius|rainbow|random_owner_on_restart|random_rotation|rank|rateoffire|reciprocal|refire|relativedamping|renderamt|renderfx|rendermode|require_all_tags|reset_time|resolution|respawn_reduction_scale|respawn_time|retainBuildings|returndelay|returnspeed|ropes_holiday_lights_allowed|rotortime|rotortimevariance|scale|schedule|score_interval|score_style|sequence|setup_length|shadowcastdist|shadowquality|shouldBlock|show_in_hud|show_time_remaining|size|skin|sleepstate|slidefriction|solid|solid_to_enemies|solidbsp|soundcontext|sounds|soundtype|spawnOnlyWhenTriggered|spawnflags|spawnpos|spawnradius|spawnrate|speaker_dsp_preset|speed|speed_forward_modifier|speedfactor|spinup|spread|start_active|start_disabled|start_paused|startdark|startdisabled|startnode|startsize|startspeed|startwidth|stay_time|step_number|sticky|strict|stun_duration|stun_effects|stun_type|style|suppressFire|surfacetype|switch_teams|systemloadscale|tauntInHell|teamToBlock|team_number|teamnumber|teleporterType|teleportfollowdistance|texframeindex|textsize|textspacingX|textspacingY|textureframe|tfclass|thick_max|thick_min|threshold|thrust|tier|time_delay|timeout|timer_length|torquelimit|track|trail_effect|train_can_recede|train_recede_time|trigger_delay|type|unlock_point|upperThreshold|urgent|useExactVelocity|useTeamSpawnPoint|useThresholdCheck|use_angles|useairlinkradius|usehelper|value|velocitytype|volume|wait|wakeradius|wakesquad|waterlevel|weaponSlot|wheels|width|win_reason|x|xfriction|xmax|xmin|y|yfriction|ymax|ymin|zfriction|zmax|zmin|zombie_lifetime|zombie_type|zone_id)\\b"
				},
				{
					"name": "entity.name.keyvalue.vector.squirrel",
					"match": "\\b(Color|PostSpawnDirection|ajarangles|angles|attachpoint|avelocity|axis|basevelocity|fogdir|gibangles|gibdir|hingeaxis|impulse_dir|launchDirection|lowerleft|lowerright|maxs|mins|movedir|origin|point0|point1|preferredcarryangles|punchangle|pushdir|rendercolor|slideaxis|spraydir|springaxis|teleport_origin|teleportoffset|upperleft|upperright|velocity|view_ofs)\\b"
				}
			]
		}
	},
	"scopeName": "source.squirrel"
}