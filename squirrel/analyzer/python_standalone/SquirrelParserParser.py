# Generated from SquirrelParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,94,813,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,1,0,5,0,132,
        8,0,10,0,12,0,135,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,159,8,1,1,2,1,
        2,5,2,163,8,2,10,2,12,2,166,9,2,1,2,1,2,1,3,1,3,3,3,172,8,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,3,4,181,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,3,6,196,8,6,1,7,1,7,1,7,1,7,3,7,202,8,7,
        1,7,1,7,3,7,206,8,7,1,7,1,7,3,7,210,8,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,3,8,220,8,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
        5,9,233,8,9,10,9,12,9,236,9,9,1,9,3,9,239,8,9,1,9,1,9,1,10,1,10,
        1,10,1,10,5,10,247,8,10,10,10,12,10,250,9,10,1,11,1,11,1,11,5,11,
        255,8,11,10,11,12,11,258,9,11,1,12,1,12,1,12,1,12,5,12,264,8,12,
        10,12,12,12,267,9,12,1,12,3,12,270,8,12,1,13,1,13,3,13,274,8,13,
        1,13,1,13,3,13,278,8,13,1,14,1,14,3,14,282,8,14,1,14,3,14,285,8,
        14,1,15,1,15,3,15,289,8,15,1,15,3,15,292,8,15,1,16,1,16,3,16,296,
        8,16,1,17,1,17,3,17,300,8,17,1,18,1,18,1,18,1,18,3,18,306,8,18,1,
        18,1,18,3,18,310,8,18,1,18,1,18,1,19,1,19,1,19,3,19,317,8,19,1,19,
        1,19,3,19,321,8,19,1,19,1,19,1,20,1,20,5,20,327,8,20,10,20,12,20,
        330,9,20,1,20,1,20,1,21,1,21,1,21,5,21,337,8,21,10,21,12,21,340,
        9,21,1,22,1,22,3,22,344,8,22,1,22,1,22,3,22,348,8,22,1,22,3,22,351,
        8,22,1,23,1,23,1,23,1,23,3,23,357,8,23,1,23,1,23,5,23,361,8,23,10,
        23,12,23,364,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,
        24,375,8,24,1,25,1,25,1,25,3,25,380,8,25,1,25,1,25,1,25,1,26,1,26,
        1,26,1,26,3,26,389,8,26,1,26,1,26,3,26,393,8,26,1,26,1,26,1,26,1,
        26,1,26,3,26,400,8,26,1,26,1,26,3,26,404,8,26,1,26,1,26,3,26,408,
        8,26,1,27,1,27,3,27,412,8,27,1,27,1,27,3,27,416,8,27,1,27,3,27,419,
        8,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,427,8,28,10,28,12,28,430,
        9,28,1,28,1,28,1,29,1,29,1,29,3,29,437,8,29,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,31,1,31,1,31,3,31,450,8,31,1,32,1,32,1,32,
        1,32,1,32,3,32,457,8,32,1,33,1,33,1,33,1,34,1,34,1,34,5,34,465,8,
        34,10,34,12,34,468,9,34,1,35,1,35,1,35,1,35,1,35,3,35,475,8,35,1,
        36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,488,8,
        38,10,38,12,38,491,9,38,3,38,493,8,38,1,38,1,38,1,38,1,38,1,39,1,
        39,1,39,1,39,5,39,503,8,39,10,39,12,39,506,9,39,1,39,1,39,1,40,1,
        40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,3,42,521,8,42,1,
        43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,532,8,44,1,45,1,
        45,1,45,1,45,1,45,1,45,5,45,540,8,45,10,45,12,45,543,9,45,1,46,1,
        46,1,46,1,46,1,46,1,46,5,46,551,8,46,10,46,12,46,554,9,46,1,47,1,
        47,1,47,1,47,1,47,1,47,5,47,562,8,47,10,47,12,47,565,9,47,1,48,1,
        48,1,48,1,48,1,48,1,48,5,48,573,8,48,10,48,12,48,576,9,48,1,49,1,
        49,1,49,1,49,1,49,1,49,5,49,584,8,49,10,49,12,49,587,9,49,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,598,8,50,10,50,12,50,
        601,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        5,51,627,8,51,10,51,12,51,630,9,51,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,5,52,644,8,52,10,52,12,52,647,9,52,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,5,53,658,8,53,10,53,
        12,53,661,9,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,5,54,675,8,54,10,54,12,54,678,9,54,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,3,55,699,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,718,8,56,1,56,
        1,56,1,56,1,56,1,56,5,56,725,8,56,10,56,12,56,728,9,56,1,57,1,57,
        1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
        3,57,745,8,57,1,58,1,58,1,58,1,58,5,58,751,8,58,10,58,12,58,754,
        9,58,3,58,756,8,58,1,58,1,58,1,59,1,59,1,59,1,59,5,59,764,8,59,10,
        59,12,59,767,9,59,3,59,769,8,59,1,59,1,59,1,60,1,60,1,60,1,60,1,
        60,1,60,3,60,779,8,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,787,8,60,
        1,60,1,60,3,60,791,8,60,1,60,1,60,3,60,795,8,60,1,61,1,61,1,61,5,
        61,800,8,61,10,61,12,61,803,9,61,1,62,1,62,3,62,807,8,62,1,63,1,
        63,1,64,1,64,1,64,0,11,90,92,94,96,98,100,102,104,106,108,112,65,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,0,4,2,0,35,35,37,41,1,0,43,49,2,0,33,35,88,89,2,0,20,20,
        91,91,886,0,133,1,0,0,0,2,158,1,0,0,0,4,160,1,0,0,0,6,169,1,0,0,
        0,8,173,1,0,0,0,10,182,1,0,0,0,12,188,1,0,0,0,14,197,1,0,0,0,16,
        214,1,0,0,0,18,226,1,0,0,0,20,242,1,0,0,0,22,251,1,0,0,0,24,259,
        1,0,0,0,26,271,1,0,0,0,28,279,1,0,0,0,30,286,1,0,0,0,32,293,1,0,
        0,0,34,297,1,0,0,0,36,301,1,0,0,0,38,313,1,0,0,0,40,324,1,0,0,0,
        42,333,1,0,0,0,44,350,1,0,0,0,46,352,1,0,0,0,48,374,1,0,0,0,50,376,
        1,0,0,0,52,407,1,0,0,0,54,409,1,0,0,0,56,420,1,0,0,0,58,433,1,0,
        0,0,60,438,1,0,0,0,62,446,1,0,0,0,64,451,1,0,0,0,66,458,1,0,0,0,
        68,461,1,0,0,0,70,474,1,0,0,0,72,476,1,0,0,0,74,478,1,0,0,0,76,483,
        1,0,0,0,78,498,1,0,0,0,80,509,1,0,0,0,82,513,1,0,0,0,84,520,1,0,
        0,0,86,522,1,0,0,0,88,531,1,0,0,0,90,533,1,0,0,0,92,544,1,0,0,0,
        94,555,1,0,0,0,96,566,1,0,0,0,98,577,1,0,0,0,100,588,1,0,0,0,102,
        602,1,0,0,0,104,631,1,0,0,0,106,648,1,0,0,0,108,662,1,0,0,0,110,
        698,1,0,0,0,112,700,1,0,0,0,114,744,1,0,0,0,116,746,1,0,0,0,118,
        759,1,0,0,0,120,794,1,0,0,0,122,796,1,0,0,0,124,806,1,0,0,0,126,
        808,1,0,0,0,128,810,1,0,0,0,130,132,3,2,1,0,131,130,1,0,0,0,132,
        135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,136,1,0,0,0,135,
        133,1,0,0,0,136,137,5,0,0,1,137,1,1,0,0,0,138,159,3,6,3,0,139,159,
        3,8,4,0,140,159,3,10,5,0,141,159,3,12,6,0,142,159,3,14,7,0,143,159,
        3,16,8,0,144,159,3,18,9,0,145,159,3,24,12,0,146,159,3,28,14,0,147,
        159,3,30,15,0,148,159,3,32,16,0,149,159,3,34,17,0,150,159,3,36,18,
        0,151,159,3,46,23,0,152,159,3,56,28,0,153,159,3,60,30,0,154,159,
        3,62,31,0,155,159,3,64,32,0,156,159,3,4,2,0,157,159,5,77,0,0,158,
        138,1,0,0,0,158,139,1,0,0,0,158,140,1,0,0,0,158,141,1,0,0,0,158,
        142,1,0,0,0,158,143,1,0,0,0,158,144,1,0,0,0,158,145,1,0,0,0,158,
        146,1,0,0,0,158,147,1,0,0,0,158,148,1,0,0,0,158,149,1,0,0,0,158,
        150,1,0,0,0,158,151,1,0,0,0,158,152,1,0,0,0,158,153,1,0,0,0,158,
        154,1,0,0,0,158,155,1,0,0,0,158,156,1,0,0,0,158,157,1,0,0,0,159,
        3,1,0,0,0,160,164,5,84,0,0,161,163,3,2,1,0,162,161,1,0,0,0,163,166,
        1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,164,
        1,0,0,0,167,168,5,85,0,0,168,5,1,0,0,0,169,171,3,82,41,0,170,172,
        5,77,0,0,171,170,1,0,0,0,171,172,1,0,0,0,172,7,1,0,0,0,173,174,5,
        1,0,0,174,175,5,82,0,0,175,176,3,82,41,0,176,177,5,83,0,0,177,180,
        3,2,1,0,178,179,5,2,0,0,179,181,3,2,1,0,180,178,1,0,0,0,180,181,
        1,0,0,0,181,9,1,0,0,0,182,183,5,3,0,0,183,184,5,82,0,0,184,185,3,
        82,41,0,185,186,5,83,0,0,186,187,3,2,1,0,187,11,1,0,0,0,188,189,
        5,4,0,0,189,190,3,2,1,0,190,191,5,3,0,0,191,192,5,82,0,0,192,193,
        3,82,41,0,193,195,5,83,0,0,194,196,5,77,0,0,195,194,1,0,0,0,195,
        196,1,0,0,0,196,13,1,0,0,0,197,198,5,5,0,0,198,201,5,82,0,0,199,
        202,3,26,13,0,200,202,3,82,41,0,201,199,1,0,0,0,201,200,1,0,0,0,
        201,202,1,0,0,0,202,203,1,0,0,0,203,205,5,77,0,0,204,206,3,82,41,
        0,205,204,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,209,5,77,0,
        0,208,210,3,82,41,0,209,208,1,0,0,0,209,210,1,0,0,0,210,211,1,0,
        0,0,211,212,5,83,0,0,212,213,3,2,1,0,213,15,1,0,0,0,214,215,5,6,
        0,0,215,216,5,82,0,0,216,219,3,128,64,0,217,218,5,78,0,0,218,220,
        3,128,64,0,219,217,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,
        5,7,0,0,222,223,3,82,41,0,223,224,5,83,0,0,224,225,3,2,1,0,225,17,
        1,0,0,0,226,227,5,8,0,0,227,228,5,82,0,0,228,229,3,82,41,0,229,230,
        5,83,0,0,230,234,5,84,0,0,231,233,3,20,10,0,232,231,1,0,0,0,233,
        236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,238,1,0,0,0,236,
        234,1,0,0,0,237,239,3,22,11,0,238,237,1,0,0,0,238,239,1,0,0,0,239,
        240,1,0,0,0,240,241,5,85,0,0,241,19,1,0,0,0,242,243,5,9,0,0,243,
        244,3,82,41,0,244,248,5,75,0,0,245,247,3,2,1,0,246,245,1,0,0,0,247,
        250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,21,1,0,0,0,250,248,
        1,0,0,0,251,252,5,10,0,0,252,256,5,75,0,0,253,255,3,2,1,0,254,253,
        1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,23,1,
        0,0,0,258,256,1,0,0,0,259,260,5,17,0,0,260,265,3,26,13,0,261,262,
        5,78,0,0,262,264,3,26,13,0,263,261,1,0,0,0,264,267,1,0,0,0,265,263,
        1,0,0,0,265,266,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,268,270,
        5,77,0,0,269,268,1,0,0,0,269,270,1,0,0,0,270,25,1,0,0,0,271,273,
        3,128,64,0,272,274,3,66,33,0,273,272,1,0,0,0,273,274,1,0,0,0,274,
        277,1,0,0,0,275,276,5,43,0,0,276,278,3,82,41,0,277,275,1,0,0,0,277,
        278,1,0,0,0,278,27,1,0,0,0,279,281,5,13,0,0,280,282,3,82,41,0,281,
        280,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,285,5,77,0,0,284,
        283,1,0,0,0,284,285,1,0,0,0,285,29,1,0,0,0,286,288,5,14,0,0,287,
        289,3,82,41,0,288,287,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,
        292,5,77,0,0,291,290,1,0,0,0,291,292,1,0,0,0,292,31,1,0,0,0,293,
        295,5,11,0,0,294,296,5,77,0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,
        33,1,0,0,0,297,299,5,12,0,0,298,300,5,77,0,0,299,298,1,0,0,0,299,
        300,1,0,0,0,300,35,1,0,0,0,301,302,5,16,0,0,302,303,3,128,64,0,303,
        305,5,82,0,0,304,306,3,42,21,0,305,304,1,0,0,0,305,306,1,0,0,0,306,
        307,1,0,0,0,307,309,5,83,0,0,308,310,3,66,33,0,309,308,1,0,0,0,309,
        310,1,0,0,0,310,311,1,0,0,0,311,312,3,40,20,0,312,37,1,0,0,0,313,
        314,5,16,0,0,314,316,5,82,0,0,315,317,3,42,21,0,316,315,1,0,0,0,
        316,317,1,0,0,0,317,318,1,0,0,0,318,320,5,83,0,0,319,321,3,66,33,
        0,320,319,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,3,40,20,
        0,323,39,1,0,0,0,324,328,5,84,0,0,325,327,3,2,1,0,326,325,1,0,0,
        0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,
        0,330,328,1,0,0,0,331,332,5,85,0,0,332,41,1,0,0,0,333,338,3,44,22,
        0,334,335,5,78,0,0,335,337,3,44,22,0,336,334,1,0,0,0,337,340,1,0,
        0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,43,1,0,0,0,340,338,1,0,0,
        0,341,343,3,128,64,0,342,344,3,66,33,0,343,342,1,0,0,0,343,344,1,
        0,0,0,344,347,1,0,0,0,345,346,5,43,0,0,346,348,3,82,41,0,347,345,
        1,0,0,0,347,348,1,0,0,0,348,351,1,0,0,0,349,351,5,80,0,0,350,341,
        1,0,0,0,350,349,1,0,0,0,351,45,1,0,0,0,352,353,5,18,0,0,353,356,
        3,128,64,0,354,355,5,19,0,0,355,357,3,82,41,0,356,354,1,0,0,0,356,
        357,1,0,0,0,357,358,1,0,0,0,358,362,5,84,0,0,359,361,3,48,24,0,360,
        359,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,
        365,1,0,0,0,364,362,1,0,0,0,365,366,5,85,0,0,366,47,1,0,0,0,367,
        375,3,50,25,0,368,375,3,52,26,0,369,375,3,54,27,0,370,371,5,21,0,
        0,371,375,3,52,26,0,372,373,5,21,0,0,373,375,3,54,27,0,374,367,1,
        0,0,0,374,368,1,0,0,0,374,369,1,0,0,0,374,370,1,0,0,0,374,372,1,
        0,0,0,375,49,1,0,0,0,376,377,5,20,0,0,377,379,5,82,0,0,378,380,3,
        42,21,0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,
        5,83,0,0,382,383,3,40,20,0,383,51,1,0,0,0,384,385,5,16,0,0,385,386,
        3,128,64,0,386,388,5,82,0,0,387,389,3,42,21,0,388,387,1,0,0,0,388,
        389,1,0,0,0,389,390,1,0,0,0,390,392,5,83,0,0,391,393,3,66,33,0,392,
        391,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,3,40,20,0,395,
        408,1,0,0,0,396,397,3,128,64,0,397,399,5,82,0,0,398,400,3,42,21,
        0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,403,5,83,0,
        0,402,404,3,66,33,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,
        0,0,405,406,3,40,20,0,406,408,1,0,0,0,407,384,1,0,0,0,407,396,1,
        0,0,0,408,53,1,0,0,0,409,411,3,128,64,0,410,412,3,66,33,0,411,410,
        1,0,0,0,411,412,1,0,0,0,412,415,1,0,0,0,413,414,5,43,0,0,414,416,
        3,82,41,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,419,
        5,77,0,0,418,417,1,0,0,0,418,419,1,0,0,0,419,55,1,0,0,0,420,421,
        5,22,0,0,421,422,3,128,64,0,422,423,5,84,0,0,423,428,3,58,29,0,424,
        425,5,78,0,0,425,427,3,58,29,0,426,424,1,0,0,0,427,430,1,0,0,0,428,
        426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,
        432,5,85,0,0,432,57,1,0,0,0,433,436,3,128,64,0,434,435,5,43,0,0,
        435,437,3,82,41,0,436,434,1,0,0,0,436,437,1,0,0,0,437,59,1,0,0,0,
        438,439,5,24,0,0,439,440,3,2,1,0,440,441,5,25,0,0,441,442,5,82,0,
        0,442,443,3,128,64,0,443,444,5,83,0,0,444,445,3,2,1,0,445,61,1,0,
        0,0,446,447,5,26,0,0,447,449,3,82,41,0,448,450,5,77,0,0,449,448,
        1,0,0,0,449,450,1,0,0,0,450,63,1,0,0,0,451,452,5,23,0,0,452,453,
        3,128,64,0,453,454,5,43,0,0,454,456,3,126,63,0,455,457,5,77,0,0,
        456,455,1,0,0,0,456,457,1,0,0,0,457,65,1,0,0,0,458,459,5,75,0,0,
        459,460,3,68,34,0,460,67,1,0,0,0,461,466,3,70,35,0,462,463,5,69,
        0,0,463,465,3,70,35,0,464,462,1,0,0,0,465,468,1,0,0,0,466,464,1,
        0,0,0,466,467,1,0,0,0,467,69,1,0,0,0,468,466,1,0,0,0,469,475,3,72,
        36,0,470,475,3,74,37,0,471,475,3,76,38,0,472,475,3,78,39,0,473,475,
        3,128,64,0,474,469,1,0,0,0,474,470,1,0,0,0,474,471,1,0,0,0,474,472,
        1,0,0,0,474,473,1,0,0,0,475,71,1,0,0,0,476,477,7,0,0,0,477,73,1,
        0,0,0,478,479,5,42,0,0,479,480,5,52,0,0,480,481,3,68,34,0,481,482,
        5,54,0,0,482,75,1,0,0,0,483,492,5,82,0,0,484,489,3,68,34,0,485,486,
        5,78,0,0,486,488,3,68,34,0,487,485,1,0,0,0,488,491,1,0,0,0,489,487,
        1,0,0,0,489,490,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,492,484,
        1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,495,5,83,0,0,495,496,
        5,81,0,0,496,497,3,68,34,0,497,77,1,0,0,0,498,499,5,84,0,0,499,504,
        3,80,40,0,500,501,5,78,0,0,501,503,3,80,40,0,502,500,1,0,0,0,503,
        506,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,507,1,0,0,0,506,
        504,1,0,0,0,507,508,5,85,0,0,508,79,1,0,0,0,509,510,3,128,64,0,510,
        511,5,75,0,0,511,512,3,68,34,0,512,81,1,0,0,0,513,514,3,84,42,0,
        514,83,1,0,0,0,515,521,3,88,44,0,516,517,3,88,44,0,517,518,3,86,
        43,0,518,519,3,84,42,0,519,521,1,0,0,0,520,515,1,0,0,0,520,516,1,
        0,0,0,521,85,1,0,0,0,522,523,7,1,0,0,523,87,1,0,0,0,524,532,3,90,
        45,0,525,526,3,90,45,0,526,527,5,74,0,0,527,528,3,82,41,0,528,529,
        5,75,0,0,529,530,3,88,44,0,530,532,1,0,0,0,531,524,1,0,0,0,531,525,
        1,0,0,0,532,89,1,0,0,0,533,534,6,45,-1,0,534,535,3,92,46,0,535,541,
        1,0,0,0,536,537,10,1,0,0,537,538,5,58,0,0,538,540,3,92,46,0,539,
        536,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,
        91,1,0,0,0,543,541,1,0,0,0,544,545,6,46,-1,0,545,546,3,94,47,0,546,
        552,1,0,0,0,547,548,10,1,0,0,548,549,5,57,0,0,549,551,3,94,47,0,
        550,547,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,
        553,93,1,0,0,0,554,552,1,0,0,0,555,556,6,47,-1,0,556,557,3,96,48,
        0,557,563,1,0,0,0,558,559,10,1,0,0,559,560,5,69,0,0,560,562,3,96,
        48,0,561,558,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,
        0,0,564,95,1,0,0,0,565,563,1,0,0,0,566,567,6,48,-1,0,567,568,3,98,
        49,0,568,574,1,0,0,0,569,570,10,1,0,0,570,571,5,70,0,0,571,573,3,
        98,49,0,572,569,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,
        1,0,0,0,575,97,1,0,0,0,576,574,1,0,0,0,577,578,6,49,-1,0,578,579,
        3,100,50,0,579,585,1,0,0,0,580,581,10,1,0,0,581,582,5,68,0,0,582,
        584,3,100,50,0,583,580,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,
        586,1,0,0,0,586,99,1,0,0,0,587,585,1,0,0,0,588,589,6,50,-1,0,589,
        590,3,102,51,0,590,599,1,0,0,0,591,592,10,2,0,0,592,593,5,50,0,0,
        593,598,3,102,51,0,594,595,10,1,0,0,595,596,5,51,0,0,596,598,3,102,
        51,0,597,591,1,0,0,0,597,594,1,0,0,0,598,601,1,0,0,0,599,597,1,0,
        0,0,599,600,1,0,0,0,600,101,1,0,0,0,601,599,1,0,0,0,602,603,6,51,
        -1,0,603,604,3,104,52,0,604,628,1,0,0,0,605,606,10,7,0,0,606,607,
        5,52,0,0,607,627,3,104,52,0,608,609,10,6,0,0,609,610,5,53,0,0,610,
        627,3,104,52,0,611,612,10,5,0,0,612,613,5,54,0,0,613,627,3,104,52,
        0,614,615,10,4,0,0,615,616,5,55,0,0,616,627,3,104,52,0,617,618,10,
        3,0,0,618,619,5,30,0,0,619,627,3,104,52,0,620,621,10,2,0,0,621,622,
        5,7,0,0,622,627,3,104,52,0,623,624,10,1,0,0,624,625,5,56,0,0,625,
        627,3,104,52,0,626,605,1,0,0,0,626,608,1,0,0,0,626,611,1,0,0,0,626,
        614,1,0,0,0,626,617,1,0,0,0,626,620,1,0,0,0,626,623,1,0,0,0,627,
        630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,103,1,0,0,0,630,
        628,1,0,0,0,631,632,6,52,-1,0,632,633,3,106,53,0,633,645,1,0,0,0,
        634,635,10,3,0,0,635,636,5,71,0,0,636,644,3,106,53,0,637,638,10,
        2,0,0,638,639,5,72,0,0,639,644,3,106,53,0,640,641,10,1,0,0,641,642,
        5,73,0,0,642,644,3,106,53,0,643,634,1,0,0,0,643,637,1,0,0,0,643,
        640,1,0,0,0,644,647,1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,
        105,1,0,0,0,647,645,1,0,0,0,648,649,6,53,-1,0,649,650,3,108,54,0,
        650,659,1,0,0,0,651,652,10,2,0,0,652,653,5,59,0,0,653,658,3,108,
        54,0,654,655,10,1,0,0,655,656,5,60,0,0,656,658,3,108,54,0,657,651,
        1,0,0,0,657,654,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,
        1,0,0,0,660,107,1,0,0,0,661,659,1,0,0,0,662,663,6,54,-1,0,663,664,
        3,110,55,0,664,676,1,0,0,0,665,666,10,3,0,0,666,667,5,61,0,0,667,
        675,3,110,55,0,668,669,10,2,0,0,669,670,5,62,0,0,670,675,3,110,55,
        0,671,672,10,1,0,0,672,673,5,63,0,0,673,675,3,110,55,0,674,665,1,
        0,0,0,674,668,1,0,0,0,674,671,1,0,0,0,675,678,1,0,0,0,676,674,1,
        0,0,0,676,677,1,0,0,0,677,109,1,0,0,0,678,676,1,0,0,0,679,699,3,
        112,56,0,680,681,5,59,0,0,681,699,3,110,55,0,682,683,5,60,0,0,683,
        699,3,110,55,0,684,685,5,66,0,0,685,699,3,110,55,0,686,687,5,67,
        0,0,687,699,3,110,55,0,688,689,5,29,0,0,689,699,3,110,55,0,690,691,
        5,28,0,0,691,699,3,110,55,0,692,693,5,27,0,0,693,699,3,110,55,0,
        694,695,5,64,0,0,695,699,3,110,55,0,696,697,5,65,0,0,697,699,3,110,
        55,0,698,679,1,0,0,0,698,680,1,0,0,0,698,682,1,0,0,0,698,684,1,0,
        0,0,698,686,1,0,0,0,698,688,1,0,0,0,698,690,1,0,0,0,698,692,1,0,
        0,0,698,694,1,0,0,0,698,696,1,0,0,0,699,111,1,0,0,0,700,701,6,56,
        -1,0,701,702,3,114,57,0,702,726,1,0,0,0,703,704,10,6,0,0,704,705,
        5,86,0,0,705,706,3,82,41,0,706,707,5,87,0,0,707,725,1,0,0,0,708,
        709,10,5,0,0,709,710,5,79,0,0,710,725,3,128,64,0,711,712,10,4,0,
        0,712,713,5,76,0,0,713,725,3,128,64,0,714,715,10,3,0,0,715,717,5,
        82,0,0,716,718,3,122,61,0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,
        1,0,0,0,719,725,5,83,0,0,720,721,10,2,0,0,721,725,5,64,0,0,722,723,
        10,1,0,0,723,725,5,65,0,0,724,703,1,0,0,0,724,708,1,0,0,0,724,711,
        1,0,0,0,724,714,1,0,0,0,724,720,1,0,0,0,724,722,1,0,0,0,725,728,
        1,0,0,0,726,724,1,0,0,0,726,727,1,0,0,0,727,113,1,0,0,0,728,726,
        1,0,0,0,729,745,3,128,64,0,730,745,3,124,62,0,731,745,5,31,0,0,732,
        745,5,32,0,0,733,734,5,82,0,0,734,735,3,82,41,0,735,736,5,83,0,0,
        736,745,1,0,0,0,737,745,3,38,19,0,738,745,3,116,58,0,739,745,3,118,
        59,0,740,741,5,15,0,0,741,745,3,82,41,0,742,743,5,14,0,0,743,745,
        3,82,41,0,744,729,1,0,0,0,744,730,1,0,0,0,744,731,1,0,0,0,744,732,
        1,0,0,0,744,733,1,0,0,0,744,737,1,0,0,0,744,738,1,0,0,0,744,739,
        1,0,0,0,744,740,1,0,0,0,744,742,1,0,0,0,745,115,1,0,0,0,746,755,
        5,86,0,0,747,752,3,82,41,0,748,749,5,78,0,0,749,751,3,82,41,0,750,
        748,1,0,0,0,751,754,1,0,0,0,752,750,1,0,0,0,752,753,1,0,0,0,753,
        756,1,0,0,0,754,752,1,0,0,0,755,747,1,0,0,0,755,756,1,0,0,0,756,
        757,1,0,0,0,757,758,5,87,0,0,758,117,1,0,0,0,759,768,5,84,0,0,760,
        765,3,120,60,0,761,762,5,78,0,0,762,764,3,120,60,0,763,761,1,0,0,
        0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,769,1,0,0,
        0,767,765,1,0,0,0,768,760,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,
        0,770,771,5,85,0,0,771,119,1,0,0,0,772,779,3,128,64,0,773,774,5,
        86,0,0,774,775,3,82,41,0,775,776,5,87,0,0,776,779,1,0,0,0,777,779,
        5,90,0,0,778,772,1,0,0,0,778,773,1,0,0,0,778,777,1,0,0,0,779,780,
        1,0,0,0,780,781,5,75,0,0,781,795,3,82,41,0,782,783,5,16,0,0,783,
        784,3,128,64,0,784,786,5,82,0,0,785,787,3,42,21,0,786,785,1,0,0,
        0,786,787,1,0,0,0,787,788,1,0,0,0,788,790,5,83,0,0,789,791,3,66,
        33,0,790,789,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,793,3,40,
        20,0,793,795,1,0,0,0,794,778,1,0,0,0,794,782,1,0,0,0,795,121,1,0,
        0,0,796,801,3,82,41,0,797,798,5,78,0,0,798,800,3,82,41,0,799,797,
        1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,801,802,1,0,0,0,802,123,
        1,0,0,0,803,801,1,0,0,0,804,807,3,126,63,0,805,807,5,90,0,0,806,
        804,1,0,0,0,806,805,1,0,0,0,807,125,1,0,0,0,808,809,7,2,0,0,809,
        127,1,0,0,0,810,811,7,3,0,0,811,129,1,0,0,0,86,133,158,164,171,180,
        195,201,205,209,219,234,238,248,256,265,269,273,277,281,284,288,
        291,295,299,305,309,316,320,328,338,343,347,350,356,362,374,379,
        388,392,399,403,407,411,415,418,428,436,449,456,466,474,489,492,
        504,520,531,541,552,563,574,585,597,599,626,628,643,645,657,659,
        674,676,698,717,724,726,744,752,755,765,768,778,786,790,794,801,
        806
    ]

class SquirrelParserParser ( Parser ):

    grammarFileName = "SquirrelParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'if'", "'else'", "'while'", "'do'", "'for'", 
                     "'foreach'", "'in'", "'switch'", "'case'", "'default'", 
                     "'break'", "'continue'", "'return'", "'yield'", "'resume'", 
                     "'function'", "'local'", "'class'", "'extends'", "'constructor'", 
                     "'static'", "'enum'", "'const'", "'try'", "'catch'", 
                     "'throw'", "'delete'", "'clone'", "'typeof'", "'instanceof'", 
                     "'this'", "'base'", "'true'", "'false'", "'null'", 
                     "'rawcall'", "'int'", "'float'", "'string'", "'bool'", 
                     "'any'", "'array'", "'='", "'<-'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'=='", "'!='", "'<'", "'<='", 
                     "'>'", "'>='", "'<=>'", "'&&'", "'||'", "'+'", "'-'", 
                     "'*'", "'/'", "'%'", "'++'", "'--'", "'!'", "'~'", 
                     "'&'", "'|'", "'^'", "'<<'", "'>>'", "'>>>'", "'?'", 
                     "':'", "'::'", "';'", "','", "'.'", "'...'", "'->'", 
                     "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "IF", "ELSE", "WHILE", "DO", "FOR", "FOREACH", 
                      "IN", "SWITCH", "CASE", "DEFAULT", "BREAK", "CONTINUE", 
                      "RETURN", "YIELD", "RESUME", "FUNCTION", "LOCAL", 
                      "CLASS", "EXTENDS", "CONSTRUCTOR", "STATIC", "ENUM", 
                      "CONST", "TRY", "CATCH", "THROW", "DELETE", "CLONE", 
                      "TYPEOF", "INSTANCEOF", "THIS", "BASE", "TRUE", "FALSE", 
                      "NULL", "RAWCALL", "INT_TYPE", "FLOAT_TYPE", "STRING_TYPE", 
                      "BOOL_TYPE", "ANY_TYPE", "ARRAY", "ASSIGN", "NEWSLOT", 
                      "PLUSEQ", "MINUSEQ", "MULEQ", "DIVEQ", "MODEQ", "EQ", 
                      "NE", "LT", "LE", "GT", "GE", "THREEWAY", "AND", "OR", 
                      "PLUS", "MINUS", "MUL", "DIV", "MOD", "PLUSPLUS", 
                      "MINUSMINUS", "NOT", "BITNOT", "BITAND", "BITOR", 
                      "BITXOR", "SHIFTL", "SHIFTR", "USHIFTR", "QUESTION", 
                      "COLON", "DOUBLECOLON", "SEMICOLON", "COMMA", "DOT", 
                      "VARPARAMS", "ARROW", "LPAREN", "RPAREN", "LBRACE", 
                      "RBRACE", "LBRACKET", "RBRACKET", "INTEGER", "FLOAT", 
                      "STRING", "IDENTIFIER", "LINE_COMMENT", "BLOCK_COMMENT", 
                      "WS" ]

    RULE_program = 0
    RULE_statement = 1
    RULE_blockStatement = 2
    RULE_expressionStatement = 3
    RULE_ifStatement = 4
    RULE_whileStatement = 5
    RULE_doWhileStatement = 6
    RULE_forStatement = 7
    RULE_foreachStatement = 8
    RULE_switchStatement = 9
    RULE_caseStatement = 10
    RULE_defaultStatement = 11
    RULE_localDeclStatement = 12
    RULE_localDecl = 13
    RULE_returnStatement = 14
    RULE_yieldStatement = 15
    RULE_breakStatement = 16
    RULE_continueStatement = 17
    RULE_functionStatement = 18
    RULE_functionExpression = 19
    RULE_functionBody = 20
    RULE_parameterList = 21
    RULE_parameter = 22
    RULE_classStatement = 23
    RULE_classMember = 24
    RULE_constructorDecl = 25
    RULE_methodDecl = 26
    RULE_fieldDecl = 27
    RULE_enumStatement = 28
    RULE_enumMember = 29
    RULE_tryStatement = 30
    RULE_throwStatement = 31
    RULE_constStatement = 32
    RULE_typeAnnotation = 33
    RULE_type = 34
    RULE_baseType = 35
    RULE_primitiveType = 36
    RULE_arrayType = 37
    RULE_functionType = 38
    RULE_tableType = 39
    RULE_objectMember = 40
    RULE_expression = 41
    RULE_assignmentExpression = 42
    RULE_assignmentOperator = 43
    RULE_conditionalExpression = 44
    RULE_logicalOrExpression = 45
    RULE_logicalAndExpression = 46
    RULE_bitwiseOrExpression = 47
    RULE_bitwiseXorExpression = 48
    RULE_bitwiseAndExpression = 49
    RULE_equalityExpression = 50
    RULE_relationalExpression = 51
    RULE_shiftExpression = 52
    RULE_additiveExpression = 53
    RULE_multiplicativeExpression = 54
    RULE_unaryExpression = 55
    RULE_postfixExpression = 56
    RULE_primaryExpression = 57
    RULE_arrayLiteral = 58
    RULE_tableLiteral = 59
    RULE_tableMember = 60
    RULE_argumentList = 61
    RULE_literal = 62
    RULE_scalar = 63
    RULE_identifier = 64

    ruleNames =  [ "program", "statement", "blockStatement", "expressionStatement", 
                   "ifStatement", "whileStatement", "doWhileStatement", 
                   "forStatement", "foreachStatement", "switchStatement", 
                   "caseStatement", "defaultStatement", "localDeclStatement", 
                   "localDecl", "returnStatement", "yieldStatement", "breakStatement", 
                   "continueStatement", "functionStatement", "functionExpression", 
                   "functionBody", "parameterList", "parameter", "classStatement", 
                   "classMember", "constructorDecl", "methodDecl", "fieldDecl", 
                   "enumStatement", "enumMember", "tryStatement", "throwStatement", 
                   "constStatement", "typeAnnotation", "type", "baseType", 
                   "primitiveType", "arrayType", "functionType", "tableType", 
                   "objectMember", "expression", "assignmentExpression", 
                   "assignmentOperator", "conditionalExpression", "logicalOrExpression", 
                   "logicalAndExpression", "bitwiseOrExpression", "bitwiseXorExpression", 
                   "bitwiseAndExpression", "equalityExpression", "relationalExpression", 
                   "shiftExpression", "additiveExpression", "multiplicativeExpression", 
                   "unaryExpression", "postfixExpression", "primaryExpression", 
                   "arrayLiteral", "tableLiteral", "tableMember", "argumentList", 
                   "literal", "scalar", "identifier" ]

    EOF = Token.EOF
    IF=1
    ELSE=2
    WHILE=3
    DO=4
    FOR=5
    FOREACH=6
    IN=7
    SWITCH=8
    CASE=9
    DEFAULT=10
    BREAK=11
    CONTINUE=12
    RETURN=13
    YIELD=14
    RESUME=15
    FUNCTION=16
    LOCAL=17
    CLASS=18
    EXTENDS=19
    CONSTRUCTOR=20
    STATIC=21
    ENUM=22
    CONST=23
    TRY=24
    CATCH=25
    THROW=26
    DELETE=27
    CLONE=28
    TYPEOF=29
    INSTANCEOF=30
    THIS=31
    BASE=32
    TRUE=33
    FALSE=34
    NULL=35
    RAWCALL=36
    INT_TYPE=37
    FLOAT_TYPE=38
    STRING_TYPE=39
    BOOL_TYPE=40
    ANY_TYPE=41
    ARRAY=42
    ASSIGN=43
    NEWSLOT=44
    PLUSEQ=45
    MINUSEQ=46
    MULEQ=47
    DIVEQ=48
    MODEQ=49
    EQ=50
    NE=51
    LT=52
    LE=53
    GT=54
    GE=55
    THREEWAY=56
    AND=57
    OR=58
    PLUS=59
    MINUS=60
    MUL=61
    DIV=62
    MOD=63
    PLUSPLUS=64
    MINUSMINUS=65
    NOT=66
    BITNOT=67
    BITAND=68
    BITOR=69
    BITXOR=70
    SHIFTL=71
    SHIFTR=72
    USHIFTR=73
    QUESTION=74
    COLON=75
    DOUBLECOLON=76
    SEMICOLON=77
    COMMA=78
    DOT=79
    VARPARAMS=80
    ARROW=81
    LPAREN=82
    RPAREN=83
    LBRACE=84
    RBRACE=85
    LBRACKET=86
    RBRACKET=87
    INTEGER=88
    FLOAT=89
    STRING=90
    IDENTIFIER=91
    LINE_COMMENT=92
    BLOCK_COMMENT=93
    WS=94

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SquirrelParserParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.StatementContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.StatementContext,i)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = SquirrelParserParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729382324519827834) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 257171471) != 0):
                self.state = 130
                self.statement()
                self.state = 135
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 136
            self.match(SquirrelParserParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.DoWhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.ForStatementContext,0)


        def foreachStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.ForeachStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.SwitchStatementContext,0)


        def localDeclStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.LocalDeclStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.ReturnStatementContext,0)


        def yieldStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.YieldStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.ContinueStatementContext,0)


        def functionStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.FunctionStatementContext,0)


        def classStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.ClassStatementContext,0)


        def enumStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.EnumStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.TryStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.ThrowStatementContext,0)


        def constStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.ConstStatementContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.BlockStatementContext,0)


        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SquirrelParserParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 138
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 139
                self.ifStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 140
                self.whileStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 141
                self.doWhileStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 142
                self.forStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 143
                self.foreachStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 144
                self.switchStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 145
                self.localDeclStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 146
                self.returnStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 147
                self.yieldStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 148
                self.breakStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 149
                self.continueStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 150
                self.functionStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 151
                self.classStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 152
                self.enumStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 153
                self.tryStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 154
                self.throwStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 155
                self.constStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 156
                self.blockStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 157
                self.match(SquirrelParserParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SquirrelParserParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SquirrelParserParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.StatementContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.StatementContext,i)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = SquirrelParserParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 160
            self.match(SquirrelParserParser.LBRACE)
            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729382324519827834) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 257171471) != 0):
                self.state = 161
                self.statement()
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 167
            self.match(SquirrelParserParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = SquirrelParserParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self.expression()
            self.state = 171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 170
                self.match(SquirrelParserParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SquirrelParserParser.IF, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.StatementContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(SquirrelParserParser.ELSE, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = SquirrelParserParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(SquirrelParserParser.IF)
            self.state = 174
            self.match(SquirrelParserParser.LPAREN)
            self.state = 175
            self.expression()
            self.state = 176
            self.match(SquirrelParserParser.RPAREN)
            self.state = 177
            self.statement()
            self.state = 180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 178
                self.match(SquirrelParserParser.ELSE)
                self.state = 179
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(SquirrelParserParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(SquirrelParserParser.StatementContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = SquirrelParserParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(SquirrelParserParser.WHILE)
            self.state = 183
            self.match(SquirrelParserParser.LPAREN)
            self.state = 184
            self.expression()
            self.state = 185
            self.match(SquirrelParserParser.RPAREN)
            self.state = 186
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(SquirrelParserParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(SquirrelParserParser.StatementContext,0)


        def WHILE(self):
            return self.getToken(SquirrelParserParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = SquirrelParserParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.match(SquirrelParserParser.DO)
            self.state = 189
            self.statement()
            self.state = 190
            self.match(SquirrelParserParser.WHILE)
            self.state = 191
            self.match(SquirrelParserParser.LPAREN)
            self.state = 192
            self.expression()
            self.state = 193
            self.match(SquirrelParserParser.RPAREN)
            self.state = 195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 194
                self.match(SquirrelParserParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SquirrelParserParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(SquirrelParserParser.SEMICOLON)
            else:
                return self.getToken(SquirrelParserParser.SEMICOLON, i)

        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(SquirrelParserParser.StatementContext,0)


        def localDecl(self):
            return self.getTypedRuleContext(SquirrelParserParser.LocalDeclContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = SquirrelParserParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.match(SquirrelParserParser.FOR)
            self.state = 198
            self.match(SquirrelParserParser.LPAREN)
            self.state = 201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 199
                self.localDecl()

            elif la_ == 2:
                self.state = 200
                self.expression()


            self.state = 203
            self.match(SquirrelParserParser.SEMICOLON)
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729382324422950912) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 257163279) != 0):
                self.state = 204
                self.expression()


            self.state = 207
            self.match(SquirrelParserParser.SEMICOLON)
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729382324422950912) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 257163279) != 0):
                self.state = 208
                self.expression()


            self.state = 211
            self.match(SquirrelParserParser.RPAREN)
            self.state = 212
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(SquirrelParserParser.FOREACH, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(SquirrelParserParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(SquirrelParserParser.StatementContext,0)


        def COMMA(self):
            return self.getToken(SquirrelParserParser.COMMA, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_foreachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachStatement" ):
                listener.enterForeachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachStatement" ):
                listener.exitForeachStatement(self)




    def foreachStatement(self):

        localctx = SquirrelParserParser.ForeachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_foreachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(SquirrelParserParser.FOREACH)
            self.state = 215
            self.match(SquirrelParserParser.LPAREN)
            self.state = 216
            self.identifier()
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 217
                self.match(SquirrelParserParser.COMMA)
                self.state = 218
                self.identifier()


            self.state = 221
            self.match(SquirrelParserParser.IN)
            self.state = 222
            self.expression()
            self.state = 223
            self.match(SquirrelParserParser.RPAREN)
            self.state = 224
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(SquirrelParserParser.SWITCH, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(SquirrelParserParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SquirrelParserParser.RBRACE, 0)

        def caseStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.CaseStatementContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.CaseStatementContext,i)


        def defaultStatement(self):
            return self.getTypedRuleContext(SquirrelParserParser.DefaultStatementContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = SquirrelParserParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(SquirrelParserParser.SWITCH)
            self.state = 227
            self.match(SquirrelParserParser.LPAREN)
            self.state = 228
            self.expression()
            self.state = 229
            self.match(SquirrelParserParser.RPAREN)
            self.state = 230
            self.match(SquirrelParserParser.LBRACE)
            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 231
                self.caseStatement()
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 237
                self.defaultStatement()


            self.state = 240
            self.match(SquirrelParserParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(SquirrelParserParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(SquirrelParserParser.COLON, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.StatementContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.StatementContext,i)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)




    def caseStatement(self):

        localctx = SquirrelParserParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(SquirrelParserParser.CASE)
            self.state = 243
            self.expression()
            self.state = 244
            self.match(SquirrelParserParser.COLON)
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729382324519827834) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 257171471) != 0):
                self.state = 245
                self.statement()
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SquirrelParserParser.DEFAULT, 0)

        def COLON(self):
            return self.getToken(SquirrelParserParser.COLON, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.StatementContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.StatementContext,i)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_defaultStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultStatement" ):
                listener.enterDefaultStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultStatement" ):
                listener.exitDefaultStatement(self)




    def defaultStatement(self):

        localctx = SquirrelParserParser.DefaultStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_defaultStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(SquirrelParserParser.DEFAULT)
            self.state = 252
            self.match(SquirrelParserParser.COLON)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729382324519827834) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 257171471) != 0):
                self.state = 253
                self.statement()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalDeclStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(SquirrelParserParser.LOCAL, 0)

        def localDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.LocalDeclContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.LocalDeclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SquirrelParserParser.COMMA)
            else:
                return self.getToken(SquirrelParserParser.COMMA, i)

        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_localDeclStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalDeclStatement" ):
                listener.enterLocalDeclStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalDeclStatement" ):
                listener.exitLocalDeclStatement(self)




    def localDeclStatement(self):

        localctx = SquirrelParserParser.LocalDeclStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_localDeclStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(SquirrelParserParser.LOCAL)
            self.state = 260
            self.localDecl()
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 261
                self.match(SquirrelParserParser.COMMA)
                self.state = 262
                self.localDecl()
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 268
                self.match(SquirrelParserParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SquirrelParserParser.TypeAnnotationContext,0)


        def ASSIGN(self):
            return self.getToken(SquirrelParserParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_localDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalDecl" ):
                listener.enterLocalDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalDecl" ):
                listener.exitLocalDecl(self)




    def localDecl(self):

        localctx = SquirrelParserParser.LocalDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_localDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.identifier()
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 272
                self.typeAnnotation()


            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 275
                self.match(SquirrelParserParser.ASSIGN)
                self.state = 276
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(SquirrelParserParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = SquirrelParserParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(SquirrelParserParser.RETURN)
            self.state = 281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 280
                self.expression()


            self.state = 284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 283
                self.match(SquirrelParserParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(SquirrelParserParser.YIELD, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_yieldStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStatement" ):
                listener.enterYieldStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStatement" ):
                listener.exitYieldStatement(self)




    def yieldStatement(self):

        localctx = SquirrelParserParser.YieldStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_yieldStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(SquirrelParserParser.YIELD)
            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 287
                self.expression()


            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 290
                self.match(SquirrelParserParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(SquirrelParserParser.BREAK, 0)

        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = SquirrelParserParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(SquirrelParserParser.BREAK)
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 294
                self.match(SquirrelParserParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(SquirrelParserParser.CONTINUE, 0)

        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = SquirrelParserParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(SquirrelParserParser.CONTINUE)
            self.state = 299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 298
                self.match(SquirrelParserParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(SquirrelParserParser.FUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(SquirrelParserParser.FunctionBodyContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SquirrelParserParser.ParameterListContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SquirrelParserParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_functionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionStatement" ):
                listener.enterFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionStatement" ):
                listener.exitFunctionStatement(self)




    def functionStatement(self):

        localctx = SquirrelParserParser.FunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_functionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(SquirrelParserParser.FUNCTION)
            self.state = 302
            self.identifier()
            self.state = 303
            self.match(SquirrelParserParser.LPAREN)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==80 or _la==91:
                self.state = 304
                self.parameterList()


            self.state = 307
            self.match(SquirrelParserParser.RPAREN)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 308
                self.typeAnnotation()


            self.state = 311
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(SquirrelParserParser.FUNCTION, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(SquirrelParserParser.FunctionBodyContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SquirrelParserParser.ParameterListContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SquirrelParserParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_functionExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionExpression" ):
                listener.enterFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionExpression" ):
                listener.exitFunctionExpression(self)




    def functionExpression(self):

        localctx = SquirrelParserParser.FunctionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_functionExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(SquirrelParserParser.FUNCTION)
            self.state = 314
            self.match(SquirrelParserParser.LPAREN)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==80 or _la==91:
                self.state = 315
                self.parameterList()


            self.state = 318
            self.match(SquirrelParserParser.RPAREN)
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 319
                self.typeAnnotation()


            self.state = 322
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SquirrelParserParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SquirrelParserParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.StatementContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.StatementContext,i)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = SquirrelParserParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_functionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(SquirrelParserParser.LBRACE)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729382324519827834) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 257171471) != 0):
                self.state = 325
                self.statement()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 331
            self.match(SquirrelParserParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.ParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SquirrelParserParser.COMMA)
            else:
                return self.getToken(SquirrelParserParser.COMMA, i)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = SquirrelParserParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.parameter()
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 334
                self.match(SquirrelParserParser.COMMA)
                self.state = 335
                self.parameter()
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SquirrelParserParser.TypeAnnotationContext,0)


        def ASSIGN(self):
            return self.getToken(SquirrelParserParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def VARPARAMS(self):
            return self.getToken(SquirrelParserParser.VARPARAMS, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = SquirrelParserParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.state = 350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 341
                self.identifier()
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 342
                    self.typeAnnotation()


                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 345
                    self.match(SquirrelParserParser.ASSIGN)
                    self.state = 346
                    self.expression()


                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 349
                self.match(SquirrelParserParser.VARPARAMS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(SquirrelParserParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(SquirrelParserParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SquirrelParserParser.RBRACE, 0)

        def EXTENDS(self):
            return self.getToken(SquirrelParserParser.EXTENDS, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def classMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.ClassMemberContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.ClassMemberContext,i)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)




    def classStatement(self):

        localctx = SquirrelParserParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(SquirrelParserParser.CLASS)
            self.state = 353
            self.identifier()
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 354
                self.match(SquirrelParserParser.EXTENDS)
                self.state = 355
                self.expression()


            self.state = 358
            self.match(SquirrelParserParser.LBRACE)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3211264) != 0) or _la==91:
                self.state = 359
                self.classMember()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 365
            self.match(SquirrelParserParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorDecl(self):
            return self.getTypedRuleContext(SquirrelParserParser.ConstructorDeclContext,0)


        def methodDecl(self):
            return self.getTypedRuleContext(SquirrelParserParser.MethodDeclContext,0)


        def fieldDecl(self):
            return self.getTypedRuleContext(SquirrelParserParser.FieldDeclContext,0)


        def STATIC(self):
            return self.getToken(SquirrelParserParser.STATIC, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_classMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMember" ):
                listener.enterClassMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMember" ):
                listener.exitClassMember(self)




    def classMember(self):

        localctx = SquirrelParserParser.ClassMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_classMember)
        try:
            self.state = 374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 367
                self.constructorDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 368
                self.methodDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 369
                self.fieldDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 370
                self.match(SquirrelParserParser.STATIC)
                self.state = 371
                self.methodDecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 372
                self.match(SquirrelParserParser.STATIC)
                self.state = 373
                self.fieldDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(SquirrelParserParser.CONSTRUCTOR, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(SquirrelParserParser.FunctionBodyContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SquirrelParserParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_constructorDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDecl" ):
                listener.enterConstructorDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDecl" ):
                listener.exitConstructorDecl(self)




    def constructorDecl(self):

        localctx = SquirrelParserParser.ConstructorDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constructorDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(SquirrelParserParser.CONSTRUCTOR)
            self.state = 377
            self.match(SquirrelParserParser.LPAREN)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==80 or _la==91:
                self.state = 378
                self.parameterList()


            self.state = 381
            self.match(SquirrelParserParser.RPAREN)
            self.state = 382
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(SquirrelParserParser.FUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(SquirrelParserParser.FunctionBodyContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SquirrelParserParser.ParameterListContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SquirrelParserParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_methodDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDecl" ):
                listener.enterMethodDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDecl" ):
                listener.exitMethodDecl(self)




    def methodDecl(self):

        localctx = SquirrelParserParser.MethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_methodDecl)
        self._la = 0 # Token type
        try:
            self.state = 407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 384
                self.match(SquirrelParserParser.FUNCTION)
                self.state = 385
                self.identifier()
                self.state = 386
                self.match(SquirrelParserParser.LPAREN)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or _la==80 or _la==91:
                    self.state = 387
                    self.parameterList()


                self.state = 390
                self.match(SquirrelParserParser.RPAREN)
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 391
                    self.typeAnnotation()


                self.state = 394
                self.functionBody()
                pass
            elif token in [20, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                self.identifier()
                self.state = 397
                self.match(SquirrelParserParser.LPAREN)
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or _la==80 or _la==91:
                    self.state = 398
                    self.parameterList()


                self.state = 401
                self.match(SquirrelParserParser.RPAREN)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 402
                    self.typeAnnotation()


                self.state = 405
                self.functionBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SquirrelParserParser.TypeAnnotationContext,0)


        def ASSIGN(self):
            return self.getToken(SquirrelParserParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_fieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDecl" ):
                listener.enterFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDecl" ):
                listener.exitFieldDecl(self)




    def fieldDecl(self):

        localctx = SquirrelParserParser.FieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fieldDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.identifier()
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 410
                self.typeAnnotation()


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 413
                self.match(SquirrelParserParser.ASSIGN)
                self.state = 414
                self.expression()


            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 417
                self.match(SquirrelParserParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(SquirrelParserParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(SquirrelParserParser.LBRACE, 0)

        def enumMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.EnumMemberContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.EnumMemberContext,i)


        def RBRACE(self):
            return self.getToken(SquirrelParserParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SquirrelParserParser.COMMA)
            else:
                return self.getToken(SquirrelParserParser.COMMA, i)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_enumStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumStatement" ):
                listener.enterEnumStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumStatement" ):
                listener.exitEnumStatement(self)




    def enumStatement(self):

        localctx = SquirrelParserParser.EnumStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_enumStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(SquirrelParserParser.ENUM)
            self.state = 421
            self.identifier()
            self.state = 422
            self.match(SquirrelParserParser.LBRACE)
            self.state = 423
            self.enumMember()
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 424
                self.match(SquirrelParserParser.COMMA)
                self.state = 425
                self.enumMember()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 431
            self.match(SquirrelParserParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(SquirrelParserParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_enumMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumMember" ):
                listener.enterEnumMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumMember" ):
                listener.exitEnumMember(self)




    def enumMember(self):

        localctx = SquirrelParserParser.EnumMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_enumMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.identifier()
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 434
                self.match(SquirrelParserParser.ASSIGN)
                self.state = 435
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(SquirrelParserParser.TRY, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.StatementContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.StatementContext,i)


        def CATCH(self):
            return self.getToken(SquirrelParserParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = SquirrelParserParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_tryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(SquirrelParserParser.TRY)
            self.state = 439
            self.statement()
            self.state = 440
            self.match(SquirrelParserParser.CATCH)
            self.state = 441
            self.match(SquirrelParserParser.LPAREN)
            self.state = 442
            self.identifier()
            self.state = 443
            self.match(SquirrelParserParser.RPAREN)
            self.state = 444
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(SquirrelParserParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = SquirrelParserParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(SquirrelParserParser.THROW)
            self.state = 447
            self.expression()
            self.state = 449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 448
                self.match(SquirrelParserParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(SquirrelParserParser.CONST, 0)

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(SquirrelParserParser.ASSIGN, 0)

        def scalar(self):
            return self.getTypedRuleContext(SquirrelParserParser.ScalarContext,0)


        def SEMICOLON(self):
            return self.getToken(SquirrelParserParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_constStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstStatement" ):
                listener.enterConstStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstStatement" ):
                listener.exitConstStatement(self)




    def constStatement(self):

        localctx = SquirrelParserParser.ConstStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_constStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(SquirrelParserParser.CONST)
            self.state = 452
            self.identifier()
            self.state = 453
            self.match(SquirrelParserParser.ASSIGN)
            self.state = 454
            self.scalar()
            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 455
                self.match(SquirrelParserParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(SquirrelParserParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(SquirrelParserParser.TypeContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_typeAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAnnotation" ):
                listener.enterTypeAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAnnotation" ):
                listener.exitTypeAnnotation(self)




    def typeAnnotation(self):

        localctx = SquirrelParserParser.TypeAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_typeAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(SquirrelParserParser.COLON)
            self.state = 459
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.BaseTypeContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.BaseTypeContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(SquirrelParserParser.BITOR)
            else:
                return self.getToken(SquirrelParserParser.BITOR, i)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = SquirrelParserParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.baseType()
            self.state = 466
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 462
                    self.match(SquirrelParserParser.BITOR)
                    self.state = 463
                    self.baseType() 
                self.state = 468
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(SquirrelParserParser.PrimitiveTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(SquirrelParserParser.ArrayTypeContext,0)


        def functionType(self):
            return self.getTypedRuleContext(SquirrelParserParser.FunctionTypeContext,0)


        def tableType(self):
            return self.getTypedRuleContext(SquirrelParserParser.TableTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_baseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseType" ):
                listener.enterBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseType" ):
                listener.exitBaseType(self)




    def baseType(self):

        localctx = SquirrelParserParser.BaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_baseType)
        try:
            self.state = 474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 37, 38, 39, 40, 41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 469
                self.primitiveType()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 470
                self.arrayType()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 3)
                self.state = 471
                self.functionType()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 4)
                self.state = 472
                self.tableType()
                pass
            elif token in [20, 91]:
                self.enterOuterAlt(localctx, 5)
                self.state = 473
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_TYPE(self):
            return self.getToken(SquirrelParserParser.INT_TYPE, 0)

        def FLOAT_TYPE(self):
            return self.getToken(SquirrelParserParser.FLOAT_TYPE, 0)

        def STRING_TYPE(self):
            return self.getToken(SquirrelParserParser.STRING_TYPE, 0)

        def BOOL_TYPE(self):
            return self.getToken(SquirrelParserParser.BOOL_TYPE, 0)

        def NULL(self):
            return self.getToken(SquirrelParserParser.NULL, 0)

        def ANY_TYPE(self):
            return self.getToken(SquirrelParserParser.ANY_TYPE, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = SquirrelParserParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4294967296000) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(SquirrelParserParser.ARRAY, 0)

        def LT(self):
            return self.getToken(SquirrelParserParser.LT, 0)

        def type_(self):
            return self.getTypedRuleContext(SquirrelParserParser.TypeContext,0)


        def GT(self):
            return self.getToken(SquirrelParserParser.GT, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)




    def arrayType(self):

        localctx = SquirrelParserParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(SquirrelParserParser.ARRAY)
            self.state = 479
            self.match(SquirrelParserParser.LT)
            self.state = 480
            self.type_()
            self.state = 481
            self.match(SquirrelParserParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def ARROW(self):
            return self.getToken(SquirrelParserParser.ARROW, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.TypeContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.TypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SquirrelParserParser.COMMA)
            else:
                return self.getToken(SquirrelParserParser.COMMA, i)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)




    def functionType(self):

        localctx = SquirrelParserParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(SquirrelParserParser.LPAREN)
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8693014855680) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 517) != 0):
                self.state = 484
                self.type_()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78:
                    self.state = 485
                    self.match(SquirrelParserParser.COMMA)
                    self.state = 486
                    self.type_()
                    self.state = 491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 494
            self.match(SquirrelParserParser.RPAREN)
            self.state = 495
            self.match(SquirrelParserParser.ARROW)
            self.state = 496
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SquirrelParserParser.LBRACE, 0)

        def objectMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.ObjectMemberContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.ObjectMemberContext,i)


        def RBRACE(self):
            return self.getToken(SquirrelParserParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SquirrelParserParser.COMMA)
            else:
                return self.getToken(SquirrelParserParser.COMMA, i)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_tableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableType" ):
                listener.enterTableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableType" ):
                listener.exitTableType(self)




    def tableType(self):

        localctx = SquirrelParserParser.TableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_tableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(SquirrelParserParser.LBRACE)
            self.state = 499
            self.objectMember()
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 500
                self.match(SquirrelParserParser.COMMA)
                self.state = 501
                self.objectMember()
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 507
            self.match(SquirrelParserParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(SquirrelParserParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(SquirrelParserParser.TypeContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_objectMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectMember" ):
                listener.enterObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectMember" ):
                listener.exitObjectMember(self)




    def objectMember(self):

        localctx = SquirrelParserParser.ObjectMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_objectMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.identifier()
            self.state = 510
            self.match(SquirrelParserParser.COLON)
            self.state = 511
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = SquirrelParserParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ConditionalExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(SquirrelParserParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = SquirrelParserParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assignmentExpression)
        try:
            self.state = 520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 515
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 516
                self.conditionalExpression()
                self.state = 517
                self.assignmentOperator()
                self.state = 518
                self.assignmentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(SquirrelParserParser.ASSIGN, 0)

        def NEWSLOT(self):
            return self.getToken(SquirrelParserParser.NEWSLOT, 0)

        def PLUSEQ(self):
            return self.getToken(SquirrelParserParser.PLUSEQ, 0)

        def MINUSEQ(self):
            return self.getToken(SquirrelParserParser.MINUSEQ, 0)

        def MULEQ(self):
            return self.getToken(SquirrelParserParser.MULEQ, 0)

        def DIVEQ(self):
            return self.getToken(SquirrelParserParser.DIVEQ, 0)

        def MODEQ(self):
            return self.getToken(SquirrelParserParser.MODEQ, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = SquirrelParserParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1117103813820416) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.LogicalOrExpressionContext,0)


        def QUESTION(self):
            return self.getToken(SquirrelParserParser.QUESTION, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(SquirrelParserParser.COLON, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = SquirrelParserParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_conditionalExpression)
        try:
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.logicalOrExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.logicalOrExpression(0)
                self.state = 526
                self.match(SquirrelParserParser.QUESTION)
                self.state = 527
                self.expression()
                self.state = 528
                self.match(SquirrelParserParser.COLON)
                self.state = 529
                self.conditionalExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.LogicalAndExpressionContext,0)


        def logicalOrExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.LogicalOrExpressionContext,0)


        def OR(self):
            return self.getToken(SquirrelParserParser.OR, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)



    def logicalOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.LogicalOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_logicalOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.logicalAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 541
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SquirrelParserParser.LogicalOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalOrExpression)
                    self.state = 536
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 537
                    self.match(SquirrelParserParser.OR)
                    self.state = 538
                    self.logicalAndExpression(0) 
                self.state = 543
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseOrExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.BitwiseOrExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.LogicalAndExpressionContext,0)


        def AND(self):
            return self.getToken(SquirrelParserParser.AND, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)



    def logicalAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.bitwiseOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 552
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SquirrelParserParser.LogicalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpression)
                    self.state = 547
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 548
                    self.match(SquirrelParserParser.AND)
                    self.state = 549
                    self.bitwiseOrExpression(0) 
                self.state = 554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitwiseOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseXorExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.BitwiseXorExpressionContext,0)


        def bitwiseOrExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.BitwiseOrExpressionContext,0)


        def BITOR(self):
            return self.getToken(SquirrelParserParser.BITOR, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_bitwiseOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseOrExpression" ):
                listener.enterBitwiseOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseOrExpression" ):
                listener.exitBitwiseOrExpression(self)



    def bitwiseOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.BitwiseOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_bitwiseOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.bitwiseXorExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SquirrelParserParser.BitwiseOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwiseOrExpression)
                    self.state = 558
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 559
                    self.match(SquirrelParserParser.BITOR)
                    self.state = 560
                    self.bitwiseXorExpression(0) 
                self.state = 565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitwiseXorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseAndExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.BitwiseAndExpressionContext,0)


        def bitwiseXorExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.BitwiseXorExpressionContext,0)


        def BITXOR(self):
            return self.getToken(SquirrelParserParser.BITXOR, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_bitwiseXorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseXorExpression" ):
                listener.enterBitwiseXorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseXorExpression" ):
                listener.exitBitwiseXorExpression(self)



    def bitwiseXorExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.BitwiseXorExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_bitwiseXorExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.bitwiseAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 574
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SquirrelParserParser.BitwiseXorExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwiseXorExpression)
                    self.state = 569
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 570
                    self.match(SquirrelParserParser.BITXOR)
                    self.state = 571
                    self.bitwiseAndExpression(0) 
                self.state = 576
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitwiseAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.EqualityExpressionContext,0)


        def bitwiseAndExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.BitwiseAndExpressionContext,0)


        def BITAND(self):
            return self.getToken(SquirrelParserParser.BITAND, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_bitwiseAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseAndExpression" ):
                listener.enterBitwiseAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseAndExpression" ):
                listener.exitBitwiseAndExpression(self)



    def bitwiseAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.BitwiseAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_bitwiseAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SquirrelParserParser.BitwiseAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwiseAndExpression)
                    self.state = 580
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 581
                    self.match(SquirrelParserParser.BITAND)
                    self.state = 582
                    self.equalityExpression(0) 
                self.state = 587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.RelationalExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.EqualityExpressionContext,0)


        def EQ(self):
            return self.getToken(SquirrelParserParser.EQ, 0)

        def NE(self):
            return self.getToken(SquirrelParserParser.NE, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.relationalExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 597
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        localctx = SquirrelParserParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 591
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 592
                        self.match(SquirrelParserParser.EQ)
                        self.state = 593
                        self.relationalExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = SquirrelParserParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 594
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 595
                        self.match(SquirrelParserParser.NE)
                        self.state = 596
                        self.relationalExpression(0)
                        pass

             
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ShiftExpressionContext,0)


        def relationalExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.RelationalExpressionContext,0)


        def LT(self):
            return self.getToken(SquirrelParserParser.LT, 0)

        def LE(self):
            return self.getToken(SquirrelParserParser.LE, 0)

        def GT(self):
            return self.getToken(SquirrelParserParser.GT, 0)

        def GE(self):
            return self.getToken(SquirrelParserParser.GE, 0)

        def INSTANCEOF(self):
            return self.getToken(SquirrelParserParser.INSTANCEOF, 0)

        def IN(self):
            return self.getToken(SquirrelParserParser.IN, 0)

        def THREEWAY(self):
            return self.getToken(SquirrelParserParser.THREEWAY, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)



    def relationalExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.RelationalExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_relationalExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.shiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 626
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        localctx = SquirrelParserParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 605
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 606
                        self.match(SquirrelParserParser.LT)
                        self.state = 607
                        self.shiftExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = SquirrelParserParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 608
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 609
                        self.match(SquirrelParserParser.LE)
                        self.state = 610
                        self.shiftExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = SquirrelParserParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 611
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 612
                        self.match(SquirrelParserParser.GT)
                        self.state = 613
                        self.shiftExpression(0)
                        pass

                    elif la_ == 4:
                        localctx = SquirrelParserParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 614
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 615
                        self.match(SquirrelParserParser.GE)
                        self.state = 616
                        self.shiftExpression(0)
                        pass

                    elif la_ == 5:
                        localctx = SquirrelParserParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 617
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 618
                        self.match(SquirrelParserParser.INSTANCEOF)
                        self.state = 619
                        self.shiftExpression(0)
                        pass

                    elif la_ == 6:
                        localctx = SquirrelParserParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 620
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 621
                        self.match(SquirrelParserParser.IN)
                        self.state = 622
                        self.shiftExpression(0)
                        pass

                    elif la_ == 7:
                        localctx = SquirrelParserParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 623
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 624
                        self.match(SquirrelParserParser.THREEWAY)
                        self.state = 625
                        self.shiftExpression(0)
                        pass

             
                self.state = 630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.AdditiveExpressionContext,0)


        def shiftExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ShiftExpressionContext,0)


        def SHIFTL(self):
            return self.getToken(SquirrelParserParser.SHIFTL, 0)

        def SHIFTR(self):
            return self.getToken(SquirrelParserParser.SHIFTR, 0)

        def USHIFTR(self):
            return self.getToken(SquirrelParserParser.USHIFTR, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)



    def shiftExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.ShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_shiftExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 645
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 643
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        localctx = SquirrelParserParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 634
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 635
                        self.match(SquirrelParserParser.SHIFTL)
                        self.state = 636
                        self.additiveExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = SquirrelParserParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 637
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 638
                        self.match(SquirrelParserParser.SHIFTR)
                        self.state = 639
                        self.additiveExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = SquirrelParserParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 640
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 641
                        self.match(SquirrelParserParser.USHIFTR)
                        self.state = 642
                        self.additiveExpression(0)
                        pass

             
                self.state = 647
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.AdditiveExpressionContext,0)


        def PLUS(self):
            return self.getToken(SquirrelParserParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SquirrelParserParser.MINUS, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)



    def additiveExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_additiveExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 659
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 657
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                    if la_ == 1:
                        localctx = SquirrelParserParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 651
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 652
                        self.match(SquirrelParserParser.PLUS)
                        self.state = 653
                        self.multiplicativeExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = SquirrelParserParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 654
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 655
                        self.match(SquirrelParserParser.MINUS)
                        self.state = 656
                        self.multiplicativeExpression(0)
                        pass

             
                self.state = 661
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.UnaryExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.MultiplicativeExpressionContext,0)


        def MUL(self):
            return self.getToken(SquirrelParserParser.MUL, 0)

        def DIV(self):
            return self.getToken(SquirrelParserParser.DIV, 0)

        def MOD(self):
            return self.getToken(SquirrelParserParser.MOD, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)



    def multiplicativeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_multiplicativeExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.unaryExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 674
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        localctx = SquirrelParserParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 665
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 666
                        self.match(SquirrelParserParser.MUL)
                        self.state = 667
                        self.unaryExpression()
                        pass

                    elif la_ == 2:
                        localctx = SquirrelParserParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 668
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 669
                        self.match(SquirrelParserParser.DIV)
                        self.state = 670
                        self.unaryExpression()
                        pass

                    elif la_ == 3:
                        localctx = SquirrelParserParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 671
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 672
                        self.match(SquirrelParserParser.MOD)
                        self.state = 673
                        self.unaryExpression()
                        pass

             
                self.state = 678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.PostfixExpressionContext,0)


        def PLUS(self):
            return self.getToken(SquirrelParserParser.PLUS, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.UnaryExpressionContext,0)


        def MINUS(self):
            return self.getToken(SquirrelParserParser.MINUS, 0)

        def NOT(self):
            return self.getToken(SquirrelParserParser.NOT, 0)

        def BITNOT(self):
            return self.getToken(SquirrelParserParser.BITNOT, 0)

        def TYPEOF(self):
            return self.getToken(SquirrelParserParser.TYPEOF, 0)

        def CLONE(self):
            return self.getToken(SquirrelParserParser.CLONE, 0)

        def DELETE(self):
            return self.getToken(SquirrelParserParser.DELETE, 0)

        def PLUSPLUS(self):
            return self.getToken(SquirrelParserParser.PLUSPLUS, 0)

        def MINUSMINUS(self):
            return self.getToken(SquirrelParserParser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = SquirrelParserParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_unaryExpression)
        try:
            self.state = 698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 15, 16, 20, 31, 32, 33, 34, 35, 82, 84, 86, 88, 89, 90, 91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.postfixExpression(0)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.match(SquirrelParserParser.PLUS)
                self.state = 681
                self.unaryExpression()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 682
                self.match(SquirrelParserParser.MINUS)
                self.state = 683
                self.unaryExpression()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 4)
                self.state = 684
                self.match(SquirrelParserParser.NOT)
                self.state = 685
                self.unaryExpression()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 5)
                self.state = 686
                self.match(SquirrelParserParser.BITNOT)
                self.state = 687
                self.unaryExpression()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 6)
                self.state = 688
                self.match(SquirrelParserParser.TYPEOF)
                self.state = 689
                self.unaryExpression()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 7)
                self.state = 690
                self.match(SquirrelParserParser.CLONE)
                self.state = 691
                self.unaryExpression()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 8)
                self.state = 692
                self.match(SquirrelParserParser.DELETE)
                self.state = 693
                self.unaryExpression()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 9)
                self.state = 694
                self.match(SquirrelParserParser.PLUSPLUS)
                self.state = 695
                self.unaryExpression()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 10)
                self.state = 696
                self.match(SquirrelParserParser.MINUSMINUS)
                self.state = 697
                self.unaryExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.PrimaryExpressionContext,0)


        def postfixExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.PostfixExpressionContext,0)


        def LBRACKET(self):
            return self.getToken(SquirrelParserParser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(SquirrelParserParser.RBRACKET, 0)

        def DOT(self):
            return self.getToken(SquirrelParserParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def DOUBLECOLON(self):
            return self.getToken(SquirrelParserParser.DOUBLECOLON, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(SquirrelParserParser.ArgumentListContext,0)


        def PLUSPLUS(self):
            return self.getToken(SquirrelParserParser.PLUSPLUS, 0)

        def MINUSMINUS(self):
            return self.getToken(SquirrelParserParser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)



    def postfixExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SquirrelParserParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.primaryExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 726
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 724
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                    if la_ == 1:
                        localctx = SquirrelParserParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 703
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 704
                        self.match(SquirrelParserParser.LBRACKET)
                        self.state = 705
                        self.expression()
                        self.state = 706
                        self.match(SquirrelParserParser.RBRACKET)
                        pass

                    elif la_ == 2:
                        localctx = SquirrelParserParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 708
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 709
                        self.match(SquirrelParserParser.DOT)
                        self.state = 710
                        self.identifier()
                        pass

                    elif la_ == 3:
                        localctx = SquirrelParserParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 711
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 712
                        self.match(SquirrelParserParser.DOUBLECOLON)
                        self.state = 713
                        self.identifier()
                        pass

                    elif la_ == 4:
                        localctx = SquirrelParserParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 714
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 715
                        self.match(SquirrelParserParser.LPAREN)
                        self.state = 717
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729382324422950912) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 257163279) != 0):
                            self.state = 716
                            self.argumentList()


                        self.state = 719
                        self.match(SquirrelParserParser.RPAREN)
                        pass

                    elif la_ == 5:
                        localctx = SquirrelParserParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 720
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 721
                        self.match(SquirrelParserParser.PLUSPLUS)
                        pass

                    elif la_ == 6:
                        localctx = SquirrelParserParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 722
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 723
                        self.match(SquirrelParserParser.MINUSMINUS)
                        pass

             
                self.state = 728
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(SquirrelParserParser.LiteralContext,0)


        def THIS(self):
            return self.getToken(SquirrelParserParser.THIS, 0)

        def BASE(self):
            return self.getToken(SquirrelParserParser.BASE, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def functionExpression(self):
            return self.getTypedRuleContext(SquirrelParserParser.FunctionExpressionContext,0)


        def arrayLiteral(self):
            return self.getTypedRuleContext(SquirrelParserParser.ArrayLiteralContext,0)


        def tableLiteral(self):
            return self.getTypedRuleContext(SquirrelParserParser.TableLiteralContext,0)


        def RESUME(self):
            return self.getToken(SquirrelParserParser.RESUME, 0)

        def YIELD(self):
            return self.getToken(SquirrelParserParser.YIELD, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = SquirrelParserParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_primaryExpression)
        try:
            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.identifier()
                pass
            elif token in [33, 34, 35, 88, 89, 90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 730
                self.literal()
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 3)
                self.state = 731
                self.match(SquirrelParserParser.THIS)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 4)
                self.state = 732
                self.match(SquirrelParserParser.BASE)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 5)
                self.state = 733
                self.match(SquirrelParserParser.LPAREN)
                self.state = 734
                self.expression()
                self.state = 735
                self.match(SquirrelParserParser.RPAREN)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 6)
                self.state = 737
                self.functionExpression()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 7)
                self.state = 738
                self.arrayLiteral()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 8)
                self.state = 739
                self.tableLiteral()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 9)
                self.state = 740
                self.match(SquirrelParserParser.RESUME)
                self.state = 741
                self.expression()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 10)
                self.state = 742
                self.match(SquirrelParserParser.YIELD)
                self.state = 743
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(SquirrelParserParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(SquirrelParserParser.RBRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SquirrelParserParser.COMMA)
            else:
                return self.getToken(SquirrelParserParser.COMMA, i)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)




    def arrayLiteral(self):

        localctx = SquirrelParserParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(SquirrelParserParser.LBRACKET)
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1729382324422950912) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 257163279) != 0):
                self.state = 747
                self.expression()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78:
                    self.state = 748
                    self.match(SquirrelParserParser.COMMA)
                    self.state = 749
                    self.expression()
                    self.state = 754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 757
            self.match(SquirrelParserParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SquirrelParserParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SquirrelParserParser.RBRACE, 0)

        def tableMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.TableMemberContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.TableMemberContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SquirrelParserParser.COMMA)
            else:
                return self.getToken(SquirrelParserParser.COMMA, i)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_tableLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableLiteral" ):
                listener.enterTableLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableLiteral" ):
                listener.exitTableLiteral(self)




    def tableLiteral(self):

        localctx = SquirrelParserParser.TableLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_tableLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(SquirrelParserParser.LBRACE)
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16 or _la==20 or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 49) != 0):
                self.state = 760
                self.tableMember()
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78:
                    self.state = 761
                    self.match(SquirrelParserParser.COMMA)
                    self.state = 762
                    self.tableMember()
                    self.state = 767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 770
            self.match(SquirrelParserParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(SquirrelParserParser.COLON, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,i)


        def identifier(self):
            return self.getTypedRuleContext(SquirrelParserParser.IdentifierContext,0)


        def LBRACKET(self):
            return self.getToken(SquirrelParserParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(SquirrelParserParser.RBRACKET, 0)

        def STRING(self):
            return self.getToken(SquirrelParserParser.STRING, 0)

        def FUNCTION(self):
            return self.getToken(SquirrelParserParser.FUNCTION, 0)

        def LPAREN(self):
            return self.getToken(SquirrelParserParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SquirrelParserParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(SquirrelParserParser.FunctionBodyContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SquirrelParserParser.ParameterListContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SquirrelParserParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return SquirrelParserParser.RULE_tableMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableMember" ):
                listener.enterTableMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableMember" ):
                listener.exitTableMember(self)




    def tableMember(self):

        localctx = SquirrelParserParser.TableMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_tableMember)
        self._la = 0 # Token type
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 86, 90, 91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 91]:
                    self.state = 772
                    self.identifier()
                    pass
                elif token in [86]:
                    self.state = 773
                    self.match(SquirrelParserParser.LBRACKET)
                    self.state = 774
                    self.expression()
                    self.state = 775
                    self.match(SquirrelParserParser.RBRACKET)
                    pass
                elif token in [90]:
                    self.state = 777
                    self.match(SquirrelParserParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 780
                self.match(SquirrelParserParser.COLON)
                self.state = 781
                self.expression()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.match(SquirrelParserParser.FUNCTION)
                self.state = 783
                self.identifier()
                self.state = 784
                self.match(SquirrelParserParser.LPAREN)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or _la==80 or _la==91:
                    self.state = 785
                    self.parameterList()


                self.state = 788
                self.match(SquirrelParserParser.RPAREN)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 789
                    self.typeAnnotation()


                self.state = 792
                self.functionBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SquirrelParserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SquirrelParserParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SquirrelParserParser.COMMA)
            else:
                return self.getToken(SquirrelParserParser.COMMA, i)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)




    def argumentList(self):

        localctx = SquirrelParserParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.expression()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 797
                self.match(SquirrelParserParser.COMMA)
                self.state = 798
                self.expression()
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar(self):
            return self.getTypedRuleContext(SquirrelParserParser.ScalarContext,0)


        def STRING(self):
            return self.getToken(SquirrelParserParser.STRING, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = SquirrelParserParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_literal)
        try:
            self.state = 806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33, 34, 35, 88, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 804
                self.scalar()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.match(SquirrelParserParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(SquirrelParserParser.INTEGER, 0)

        def FLOAT(self):
            return self.getToken(SquirrelParserParser.FLOAT, 0)

        def TRUE(self):
            return self.getToken(SquirrelParserParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SquirrelParserParser.FALSE, 0)

        def NULL(self):
            return self.getToken(SquirrelParserParser.NULL, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar" ):
                listener.enterScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar" ):
                listener.exitScalar(self)




    def scalar(self):

        localctx = SquirrelParserParser.ScalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            _la = self._input.LA(1)
            if not(((((_la - 33)) & ~0x3f) == 0 and ((1 << (_la - 33)) & 108086391056891911) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SquirrelParserParser.IDENTIFIER, 0)

        def CONSTRUCTOR(self):
            return self.getToken(SquirrelParserParser.CONSTRUCTOR, 0)

        def getRuleIndex(self):
            return SquirrelParserParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SquirrelParserParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            _la = self._input.LA(1)
            if not(_la==20 or _la==91):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[45] = self.logicalOrExpression_sempred
        self._predicates[46] = self.logicalAndExpression_sempred
        self._predicates[47] = self.bitwiseOrExpression_sempred
        self._predicates[48] = self.bitwiseXorExpression_sempred
        self._predicates[49] = self.bitwiseAndExpression_sempred
        self._predicates[50] = self.equalityExpression_sempred
        self._predicates[51] = self.relationalExpression_sempred
        self._predicates[52] = self.shiftExpression_sempred
        self._predicates[53] = self.additiveExpression_sempred
        self._predicates[54] = self.multiplicativeExpression_sempred
        self._predicates[56] = self.postfixExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def logicalOrExpression_sempred(self, localctx:LogicalOrExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def logicalAndExpression_sempred(self, localctx:LogicalAndExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def bitwiseOrExpression_sempred(self, localctx:BitwiseOrExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def bitwiseXorExpression_sempred(self, localctx:BitwiseXorExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def bitwiseAndExpression_sempred(self, localctx:BitwiseAndExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def relationalExpression_sempred(self, localctx:RelationalExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         

    def shiftExpression_sempred(self, localctx:ShiftExpressionContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx:AdditiveExpressionContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeExpression_sempred(self, localctx:MultiplicativeExpressionContext, predIndex:int):
            if predIndex == 19:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         

    def postfixExpression_sempred(self, localctx:PostfixExpressionContext, predIndex:int):
            if predIndex == 22:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         




