// TypeScript/MyPy-style annotations

// Example file with intentional type errors for testing

// Type mismatch errors
local name: string = 123
age: int <- "twenty"

// Function parameter type errors
function greet(name: string): string {
    return "Hello " + name
}

function GetWorldspawn(): entity {
    return Entities.First()
}

local result:  string = greet(42)
//local numbers: array<int> = ["one", "two", "three"]
local numbers: array<string> = ["one", "two", "three"]

NetProps.SetPropString(null, "m_iName", 1234)

// Return type errors
function getAge(): int {
    return "unknown"
}

// Null assignment errors
local required: string = null

// Optional type usage
local optional: string? = "hello"
local length: int = optional.len() // Error: cannot call method on optional without null check

// Undefined variable
local x: int = undefinedVar // Error: undefined variable

// Wrong number of arguments
function add(a: int, b: int): int {
    return a + b
}

local sum: int = add(5) // Error: missing argument


// Class inheritance errors
class Animal {
    name: string = null
    
    constructor(name: string) {
        this.name = name
    }
}


class Dog extends Animal {
    breed: string = null
    
    constructor(name: string, breed: string) {
        base.constructor(name)
        this.breed = breed
    }
}

function MakeClass(): class {

    return class {
        function test() {
            return true
        }
    }
}


local pet: Animal = Dog("Rex", "German Shepherd") // OK: subclass assignable to base class
local specificDog: Dog = Animal("Generic") // Error: cannot assign base class to subclass
